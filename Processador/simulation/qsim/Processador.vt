// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/17/2018 20:24:18"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Processador
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Processador_vlg_sample_tst(
	clk27,
	sw,
	sw17,
	sampler_tx
);
input  clk27;
input [7:0] sw;
input  sw17;
output sampler_tx;

reg sample;
time current_time;
always @(clk27 or sw or sw17)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Processador_vlg_check_tst (
	A,
	B,
	C,
	D,
	entrada2,
	Ld_IR,
	Ld_mar_ABCD,
	Ld_PC,
	opcode,
	out0,
	out1,
	out2,
	pc,
	ram_out,
	Wr_ABCD,
	write_data,
	sampler_rx
);
input [7:0] A;
input [7:0] B;
input [7:0] C;
input [7:0] D;
input [7:0] entrada2;
input  Ld_IR;
input  Ld_mar_ABCD;
input  Ld_PC;
input [7:0] opcode;
input [6:0] out0;
input [6:0] out1;
input [6:0] out2;
input [7:0] pc;
input [7:0] ram_out;
input  Wr_ABCD;
input [7:0] write_data;
input sampler_rx;

reg [7:0] A_expected;
reg [7:0] B_expected;
reg [7:0] C_expected;
reg [7:0] D_expected;
reg [7:0] entrada2_expected;
reg  Ld_IR_expected;
reg  Ld_mar_ABCD_expected;
reg  Ld_PC_expected;
reg [7:0] opcode_expected;
reg [6:0] out0_expected;
reg [6:0] out1_expected;
reg [6:0] out2_expected;
reg [7:0] pc_expected;
reg [7:0] ram_out_expected;
reg  Wr_ABCD_expected;
reg [7:0] write_data_expected;

reg [7:0] A_prev;
reg [7:0] B_prev;
reg [7:0] C_prev;
reg [7:0] D_prev;
reg [7:0] entrada2_prev;
reg  Ld_IR_prev;
reg  Ld_mar_ABCD_prev;
reg  Ld_PC_prev;
reg [7:0] opcode_prev;
reg [6:0] out0_prev;
reg [6:0] out1_prev;
reg [6:0] out2_prev;
reg [7:0] pc_prev;
reg [7:0] ram_out_prev;
reg  Wr_ABCD_prev;
reg [7:0] write_data_prev;

reg [7:0] A_expected_prev;
reg [7:0] B_expected_prev;
reg [7:0] C_expected_prev;
reg [7:0] D_expected_prev;
reg  Ld_IR_expected_prev;
reg  Ld_mar_ABCD_expected_prev;
reg  Ld_PC_expected_prev;
reg [7:0] opcode_expected_prev;
reg [7:0] pc_expected_prev;
reg [7:0] ram_out_expected_prev;
reg  Wr_ABCD_expected_prev;
reg [7:0] write_data_expected_prev;

reg [7:0] last_A_exp;
reg [7:0] last_B_exp;
reg [7:0] last_C_exp;
reg [7:0] last_D_exp;
reg  last_Ld_IR_exp;
reg  last_Ld_mar_ABCD_exp;
reg  last_Ld_PC_exp;
reg [7:0] last_opcode_exp;
reg [7:0] last_pc_exp;
reg [7:0] last_ram_out_exp;
reg  last_Wr_ABCD_exp;
reg [7:0] last_write_data_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:16] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 16'b1;
end

// update real /o prevs

always @(trigger)
begin
	A_prev = A;
	B_prev = B;
	C_prev = C;
	D_prev = D;
	entrada2_prev = entrada2;
	Ld_IR_prev = Ld_IR;
	Ld_mar_ABCD_prev = Ld_mar_ABCD;
	Ld_PC_prev = Ld_PC;
	opcode_prev = opcode;
	out0_prev = out0;
	out1_prev = out1;
	out2_prev = out2;
	pc_prev = pc;
	ram_out_prev = ram_out;
	Wr_ABCD_prev = Wr_ABCD;
	write_data_prev = write_data;
end

// update expected /o prevs

always @(trigger)
begin
	A_expected_prev = A_expected;
	B_expected_prev = B_expected;
	C_expected_prev = C_expected;
	D_expected_prev = D_expected;
	Ld_IR_expected_prev = Ld_IR_expected;
	Ld_mar_ABCD_expected_prev = Ld_mar_ABCD_expected;
	Ld_PC_expected_prev = Ld_PC_expected;
	opcode_expected_prev = opcode_expected;
	pc_expected_prev = pc_expected;
	ram_out_expected_prev = ram_out_expected;
	Wr_ABCD_expected_prev = Wr_ABCD_expected;
	write_data_expected_prev = write_data_expected;
end


// expected A[ 7 ]
initial
begin
	A_expected[7] = 1'bX;
end 
// expected A[ 6 ]
initial
begin
	A_expected[6] = 1'bX;
end 
// expected A[ 5 ]
initial
begin
	A_expected[5] = 1'bX;
end 
// expected A[ 4 ]
initial
begin
	A_expected[4] = 1'bX;
end 
// expected A[ 3 ]
initial
begin
	A_expected[3] = 1'bX;
end 
// expected A[ 2 ]
initial
begin
	A_expected[2] = 1'bX;
end 
// expected A[ 1 ]
initial
begin
	A_expected[1] = 1'bX;
end 
// expected A[ 0 ]
initial
begin
	A_expected[0] = 1'bX;
end 
// expected B[ 7 ]
initial
begin
	B_expected[7] = 1'bX;
end 
// expected B[ 6 ]
initial
begin
	B_expected[6] = 1'bX;
end 
// expected B[ 5 ]
initial
begin
	B_expected[5] = 1'bX;
end 
// expected B[ 4 ]
initial
begin
	B_expected[4] = 1'bX;
end 
// expected B[ 3 ]
initial
begin
	B_expected[3] = 1'bX;
end 
// expected B[ 2 ]
initial
begin
	B_expected[2] = 1'bX;
end 
// expected B[ 1 ]
initial
begin
	B_expected[1] = 1'bX;
end 
// expected B[ 0 ]
initial
begin
	B_expected[0] = 1'bX;
end 
// expected C[ 7 ]
initial
begin
	C_expected[7] = 1'bX;
end 
// expected C[ 6 ]
initial
begin
	C_expected[6] = 1'bX;
end 
// expected C[ 5 ]
initial
begin
	C_expected[5] = 1'bX;
end 
// expected C[ 4 ]
initial
begin
	C_expected[4] = 1'bX;
end 
// expected C[ 3 ]
initial
begin
	C_expected[3] = 1'bX;
end 
// expected C[ 2 ]
initial
begin
	C_expected[2] = 1'bX;
end 
// expected C[ 1 ]
initial
begin
	C_expected[1] = 1'bX;
end 
// expected C[ 0 ]
initial
begin
	C_expected[0] = 1'bX;
end 
// expected D[ 7 ]
initial
begin
	D_expected[7] = 1'bX;
end 
// expected D[ 6 ]
initial
begin
	D_expected[6] = 1'bX;
end 
// expected D[ 5 ]
initial
begin
	D_expected[5] = 1'bX;
end 
// expected D[ 4 ]
initial
begin
	D_expected[4] = 1'bX;
end 
// expected D[ 3 ]
initial
begin
	D_expected[3] = 1'bX;
end 
// expected D[ 2 ]
initial
begin
	D_expected[2] = 1'bX;
end 
// expected D[ 1 ]
initial
begin
	D_expected[1] = 1'bX;
end 
// expected D[ 0 ]
initial
begin
	D_expected[0] = 1'bX;
end 

// expected Ld_IR
initial
begin
	Ld_IR_expected = 1'bX;
end 

// expected Ld_mar_ABCD
initial
begin
	Ld_mar_ABCD_expected = 1'bX;
end 

// expected Ld_PC
initial
begin
	Ld_PC_expected = 1'bX;
end 
// expected opcode[ 7 ]
initial
begin
	opcode_expected[7] = 1'bX;
end 
// expected opcode[ 6 ]
initial
begin
	opcode_expected[6] = 1'bX;
end 
// expected opcode[ 5 ]
initial
begin
	opcode_expected[5] = 1'bX;
end 
// expected opcode[ 4 ]
initial
begin
	opcode_expected[4] = 1'bX;
end 
// expected opcode[ 3 ]
initial
begin
	opcode_expected[3] = 1'bX;
end 
// expected opcode[ 2 ]
initial
begin
	opcode_expected[2] = 1'bX;
end 
// expected opcode[ 1 ]
initial
begin
	opcode_expected[1] = 1'bX;
end 
// expected opcode[ 0 ]
initial
begin
	opcode_expected[0] = 1'bX;
end 
// expected pc[ 7 ]
initial
begin
	pc_expected[7] = 1'bX;
end 
// expected pc[ 6 ]
initial
begin
	pc_expected[6] = 1'bX;
end 
// expected pc[ 5 ]
initial
begin
	pc_expected[5] = 1'bX;
end 
// expected pc[ 4 ]
initial
begin
	pc_expected[4] = 1'bX;
end 
// expected pc[ 3 ]
initial
begin
	pc_expected[3] = 1'bX;
end 
// expected pc[ 2 ]
initial
begin
	pc_expected[2] = 1'bX;
end 
// expected pc[ 1 ]
initial
begin
	pc_expected[1] = 1'bX;
end 
// expected pc[ 0 ]
initial
begin
	pc_expected[0] = 1'bX;
end 
// expected ram_out[ 7 ]
initial
begin
	ram_out_expected[7] = 1'bX;
end 
// expected ram_out[ 6 ]
initial
begin
	ram_out_expected[6] = 1'bX;
end 
// expected ram_out[ 5 ]
initial
begin
	ram_out_expected[5] = 1'bX;
end 
// expected ram_out[ 4 ]
initial
begin
	ram_out_expected[4] = 1'bX;
end 
// expected ram_out[ 3 ]
initial
begin
	ram_out_expected[3] = 1'bX;
end 
// expected ram_out[ 2 ]
initial
begin
	ram_out_expected[2] = 1'bX;
end 
// expected ram_out[ 1 ]
initial
begin
	ram_out_expected[1] = 1'bX;
end 
// expected ram_out[ 0 ]
initial
begin
	ram_out_expected[0] = 1'bX;
end 

// expected Wr_ABCD
initial
begin
	Wr_ABCD_expected = 1'bX;
end 
// expected write_data[ 7 ]
initial
begin
	write_data_expected[7] = 1'bX;
end 
// expected write_data[ 6 ]
initial
begin
	write_data_expected[6] = 1'bX;
end 
// expected write_data[ 5 ]
initial
begin
	write_data_expected[5] = 1'bX;
end 
// expected write_data[ 4 ]
initial
begin
	write_data_expected[4] = 1'bX;
end 
// expected write_data[ 3 ]
initial
begin
	write_data_expected[3] = 1'bX;
end 
// expected write_data[ 2 ]
initial
begin
	write_data_expected[2] = 1'bX;
end 
// expected write_data[ 1 ]
initial
begin
	write_data_expected[1] = 1'bX;
end 
// expected write_data[ 0 ]
initial
begin
	write_data_expected[0] = 1'bX;
end 
// generate trigger
always @(A_expected or A or B_expected or B or C_expected or C or D_expected or D or entrada2_expected or entrada2 or Ld_IR_expected or Ld_IR or Ld_mar_ABCD_expected or Ld_mar_ABCD or Ld_PC_expected or Ld_PC or opcode_expected or opcode or out0_expected or out0 or out1_expected or out1 or out2_expected or out2 or pc_expected or pc or ram_out_expected or ram_out or Wr_ABCD_expected or Wr_ABCD or write_data_expected or write_data)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected A = %b | expected B = %b | expected C = %b | expected D = %b | expected entrada2 = %b | expected Ld_IR = %b | expected Ld_mar_ABCD = %b | expected Ld_PC = %b | expected opcode = %b | expected out0 = %b | expected out1 = %b | expected out2 = %b | expected pc = %b | expected ram_out = %b | expected Wr_ABCD = %b | expected write_data = %b | ",A_expected_prev,B_expected_prev,C_expected_prev,D_expected_prev,entrada2_expected_prev,Ld_IR_expected_prev,Ld_mar_ABCD_expected_prev,Ld_PC_expected_prev,opcode_expected_prev,out0_expected_prev,out1_expected_prev,out2_expected_prev,pc_expected_prev,ram_out_expected_prev,Wr_ABCD_expected_prev,write_data_expected_prev);
	$display("| real A = %b | real B = %b | real C = %b | real D = %b | real entrada2 = %b | real Ld_IR = %b | real Ld_mar_ABCD = %b | real Ld_PC = %b | real opcode = %b | real out0 = %b | real out1 = %b | real out2 = %b | real pc = %b | real ram_out = %b | real Wr_ABCD = %b | real write_data = %b | ",A_prev,B_prev,C_prev,D_prev,entrada2_prev,Ld_IR_prev,Ld_mar_ABCD_prev,Ld_PC_prev,opcode_prev,out0_prev,out1_prev,out2_prev,pc_prev,ram_out_prev,Wr_ABCD_prev,write_data_prev);
`endif
	if (
		( A_expected_prev[0] !== 1'bx ) && ( A_prev[0] !== A_expected_prev[0] )
		&& ((A_expected_prev[0] !== last_A_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[0] = A_expected_prev[0];
	end
	if (
		( A_expected_prev[1] !== 1'bx ) && ( A_prev[1] !== A_expected_prev[1] )
		&& ((A_expected_prev[1] !== last_A_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[1] = A_expected_prev[1];
	end
	if (
		( A_expected_prev[2] !== 1'bx ) && ( A_prev[2] !== A_expected_prev[2] )
		&& ((A_expected_prev[2] !== last_A_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[2] = A_expected_prev[2];
	end
	if (
		( A_expected_prev[3] !== 1'bx ) && ( A_prev[3] !== A_expected_prev[3] )
		&& ((A_expected_prev[3] !== last_A_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[3] = A_expected_prev[3];
	end
	if (
		( A_expected_prev[4] !== 1'bx ) && ( A_prev[4] !== A_expected_prev[4] )
		&& ((A_expected_prev[4] !== last_A_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[4] = A_expected_prev[4];
	end
	if (
		( A_expected_prev[5] !== 1'bx ) && ( A_prev[5] !== A_expected_prev[5] )
		&& ((A_expected_prev[5] !== last_A_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[5] = A_expected_prev[5];
	end
	if (
		( A_expected_prev[6] !== 1'bx ) && ( A_prev[6] !== A_expected_prev[6] )
		&& ((A_expected_prev[6] !== last_A_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[6] = A_expected_prev[6];
	end
	if (
		( A_expected_prev[7] !== 1'bx ) && ( A_prev[7] !== A_expected_prev[7] )
		&& ((A_expected_prev[7] !== last_A_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[7] = A_expected_prev[7];
	end
	if (
		( B_expected_prev[0] !== 1'bx ) && ( B_prev[0] !== B_expected_prev[0] )
		&& ((B_expected_prev[0] !== last_B_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[0] = B_expected_prev[0];
	end
	if (
		( B_expected_prev[1] !== 1'bx ) && ( B_prev[1] !== B_expected_prev[1] )
		&& ((B_expected_prev[1] !== last_B_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[1] = B_expected_prev[1];
	end
	if (
		( B_expected_prev[2] !== 1'bx ) && ( B_prev[2] !== B_expected_prev[2] )
		&& ((B_expected_prev[2] !== last_B_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[2] = B_expected_prev[2];
	end
	if (
		( B_expected_prev[3] !== 1'bx ) && ( B_prev[3] !== B_expected_prev[3] )
		&& ((B_expected_prev[3] !== last_B_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[3] = B_expected_prev[3];
	end
	if (
		( B_expected_prev[4] !== 1'bx ) && ( B_prev[4] !== B_expected_prev[4] )
		&& ((B_expected_prev[4] !== last_B_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[4] = B_expected_prev[4];
	end
	if (
		( B_expected_prev[5] !== 1'bx ) && ( B_prev[5] !== B_expected_prev[5] )
		&& ((B_expected_prev[5] !== last_B_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[5] = B_expected_prev[5];
	end
	if (
		( B_expected_prev[6] !== 1'bx ) && ( B_prev[6] !== B_expected_prev[6] )
		&& ((B_expected_prev[6] !== last_B_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[6] = B_expected_prev[6];
	end
	if (
		( B_expected_prev[7] !== 1'bx ) && ( B_prev[7] !== B_expected_prev[7] )
		&& ((B_expected_prev[7] !== last_B_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[7] = B_expected_prev[7];
	end
	if (
		( C_expected_prev[0] !== 1'bx ) && ( C_prev[0] !== C_expected_prev[0] )
		&& ((C_expected_prev[0] !== last_C_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[0] = C_expected_prev[0];
	end
	if (
		( C_expected_prev[1] !== 1'bx ) && ( C_prev[1] !== C_expected_prev[1] )
		&& ((C_expected_prev[1] !== last_C_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[1] = C_expected_prev[1];
	end
	if (
		( C_expected_prev[2] !== 1'bx ) && ( C_prev[2] !== C_expected_prev[2] )
		&& ((C_expected_prev[2] !== last_C_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[2] = C_expected_prev[2];
	end
	if (
		( C_expected_prev[3] !== 1'bx ) && ( C_prev[3] !== C_expected_prev[3] )
		&& ((C_expected_prev[3] !== last_C_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[3] = C_expected_prev[3];
	end
	if (
		( C_expected_prev[4] !== 1'bx ) && ( C_prev[4] !== C_expected_prev[4] )
		&& ((C_expected_prev[4] !== last_C_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[4] = C_expected_prev[4];
	end
	if (
		( C_expected_prev[5] !== 1'bx ) && ( C_prev[5] !== C_expected_prev[5] )
		&& ((C_expected_prev[5] !== last_C_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[5] = C_expected_prev[5];
	end
	if (
		( C_expected_prev[6] !== 1'bx ) && ( C_prev[6] !== C_expected_prev[6] )
		&& ((C_expected_prev[6] !== last_C_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[6] = C_expected_prev[6];
	end
	if (
		( C_expected_prev[7] !== 1'bx ) && ( C_prev[7] !== C_expected_prev[7] )
		&& ((C_expected_prev[7] !== last_C_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp[7] = C_expected_prev[7];
	end
	if (
		( D_expected_prev[0] !== 1'bx ) && ( D_prev[0] !== D_expected_prev[0] )
		&& ((D_expected_prev[0] !== last_D_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_expected_prev);
		$display ("     Real value = %b", D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D_exp[0] = D_expected_prev[0];
	end
	if (
		( D_expected_prev[1] !== 1'bx ) && ( D_prev[1] !== D_expected_prev[1] )
		&& ((D_expected_prev[1] !== last_D_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_expected_prev);
		$display ("     Real value = %b", D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D_exp[1] = D_expected_prev[1];
	end
	if (
		( D_expected_prev[2] !== 1'bx ) && ( D_prev[2] !== D_expected_prev[2] )
		&& ((D_expected_prev[2] !== last_D_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_expected_prev);
		$display ("     Real value = %b", D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D_exp[2] = D_expected_prev[2];
	end
	if (
		( D_expected_prev[3] !== 1'bx ) && ( D_prev[3] !== D_expected_prev[3] )
		&& ((D_expected_prev[3] !== last_D_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_expected_prev);
		$display ("     Real value = %b", D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D_exp[3] = D_expected_prev[3];
	end
	if (
		( D_expected_prev[4] !== 1'bx ) && ( D_prev[4] !== D_expected_prev[4] )
		&& ((D_expected_prev[4] !== last_D_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_expected_prev);
		$display ("     Real value = %b", D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D_exp[4] = D_expected_prev[4];
	end
	if (
		( D_expected_prev[5] !== 1'bx ) && ( D_prev[5] !== D_expected_prev[5] )
		&& ((D_expected_prev[5] !== last_D_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_expected_prev);
		$display ("     Real value = %b", D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D_exp[5] = D_expected_prev[5];
	end
	if (
		( D_expected_prev[6] !== 1'bx ) && ( D_prev[6] !== D_expected_prev[6] )
		&& ((D_expected_prev[6] !== last_D_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_expected_prev);
		$display ("     Real value = %b", D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D_exp[6] = D_expected_prev[6];
	end
	if (
		( D_expected_prev[7] !== 1'bx ) && ( D_prev[7] !== D_expected_prev[7] )
		&& ((D_expected_prev[7] !== last_D_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_expected_prev);
		$display ("     Real value = %b", D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D_exp[7] = D_expected_prev[7];
	end
	if (
		( Ld_IR_expected_prev !== 1'bx ) && ( Ld_IR_prev !== Ld_IR_expected_prev )
		&& ((Ld_IR_expected_prev !== last_Ld_IR_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Ld_IR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Ld_IR_expected_prev);
		$display ("     Real value = %b", Ld_IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Ld_IR_exp = Ld_IR_expected_prev;
	end
	if (
		( Ld_mar_ABCD_expected_prev !== 1'bx ) && ( Ld_mar_ABCD_prev !== Ld_mar_ABCD_expected_prev )
		&& ((Ld_mar_ABCD_expected_prev !== last_Ld_mar_ABCD_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Ld_mar_ABCD :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Ld_mar_ABCD_expected_prev);
		$display ("     Real value = %b", Ld_mar_ABCD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Ld_mar_ABCD_exp = Ld_mar_ABCD_expected_prev;
	end
	if (
		( Ld_PC_expected_prev !== 1'bx ) && ( Ld_PC_prev !== Ld_PC_expected_prev )
		&& ((Ld_PC_expected_prev !== last_Ld_PC_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Ld_PC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Ld_PC_expected_prev);
		$display ("     Real value = %b", Ld_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Ld_PC_exp = Ld_PC_expected_prev;
	end
	if (
		( opcode_expected_prev[0] !== 1'bx ) && ( opcode_prev[0] !== opcode_expected_prev[0] )
		&& ((opcode_expected_prev[0] !== last_opcode_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_opcode_exp[0] = opcode_expected_prev[0];
	end
	if (
		( opcode_expected_prev[1] !== 1'bx ) && ( opcode_prev[1] !== opcode_expected_prev[1] )
		&& ((opcode_expected_prev[1] !== last_opcode_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_opcode_exp[1] = opcode_expected_prev[1];
	end
	if (
		( opcode_expected_prev[2] !== 1'bx ) && ( opcode_prev[2] !== opcode_expected_prev[2] )
		&& ((opcode_expected_prev[2] !== last_opcode_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_opcode_exp[2] = opcode_expected_prev[2];
	end
	if (
		( opcode_expected_prev[3] !== 1'bx ) && ( opcode_prev[3] !== opcode_expected_prev[3] )
		&& ((opcode_expected_prev[3] !== last_opcode_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_opcode_exp[3] = opcode_expected_prev[3];
	end
	if (
		( opcode_expected_prev[4] !== 1'bx ) && ( opcode_prev[4] !== opcode_expected_prev[4] )
		&& ((opcode_expected_prev[4] !== last_opcode_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_opcode_exp[4] = opcode_expected_prev[4];
	end
	if (
		( opcode_expected_prev[5] !== 1'bx ) && ( opcode_prev[5] !== opcode_expected_prev[5] )
		&& ((opcode_expected_prev[5] !== last_opcode_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_opcode_exp[5] = opcode_expected_prev[5];
	end
	if (
		( opcode_expected_prev[6] !== 1'bx ) && ( opcode_prev[6] !== opcode_expected_prev[6] )
		&& ((opcode_expected_prev[6] !== last_opcode_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_opcode_exp[6] = opcode_expected_prev[6];
	end
	if (
		( opcode_expected_prev[7] !== 1'bx ) && ( opcode_prev[7] !== opcode_expected_prev[7] )
		&& ((opcode_expected_prev[7] !== last_opcode_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_opcode_exp[7] = opcode_expected_prev[7];
	end
	if (
		( pc_expected_prev[0] !== 1'bx ) && ( pc_prev[0] !== pc_expected_prev[0] )
		&& ((pc_expected_prev[0] !== last_pc_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_pc_exp[0] = pc_expected_prev[0];
	end
	if (
		( pc_expected_prev[1] !== 1'bx ) && ( pc_prev[1] !== pc_expected_prev[1] )
		&& ((pc_expected_prev[1] !== last_pc_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_pc_exp[1] = pc_expected_prev[1];
	end
	if (
		( pc_expected_prev[2] !== 1'bx ) && ( pc_prev[2] !== pc_expected_prev[2] )
		&& ((pc_expected_prev[2] !== last_pc_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_pc_exp[2] = pc_expected_prev[2];
	end
	if (
		( pc_expected_prev[3] !== 1'bx ) && ( pc_prev[3] !== pc_expected_prev[3] )
		&& ((pc_expected_prev[3] !== last_pc_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_pc_exp[3] = pc_expected_prev[3];
	end
	if (
		( pc_expected_prev[4] !== 1'bx ) && ( pc_prev[4] !== pc_expected_prev[4] )
		&& ((pc_expected_prev[4] !== last_pc_exp[4]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_pc_exp[4] = pc_expected_prev[4];
	end
	if (
		( pc_expected_prev[5] !== 1'bx ) && ( pc_prev[5] !== pc_expected_prev[5] )
		&& ((pc_expected_prev[5] !== last_pc_exp[5]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_pc_exp[5] = pc_expected_prev[5];
	end
	if (
		( pc_expected_prev[6] !== 1'bx ) && ( pc_prev[6] !== pc_expected_prev[6] )
		&& ((pc_expected_prev[6] !== last_pc_exp[6]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_pc_exp[6] = pc_expected_prev[6];
	end
	if (
		( pc_expected_prev[7] !== 1'bx ) && ( pc_prev[7] !== pc_expected_prev[7] )
		&& ((pc_expected_prev[7] !== last_pc_exp[7]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_expected_prev);
		$display ("     Real value = %b", pc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_pc_exp[7] = pc_expected_prev[7];
	end
	if (
		( ram_out_expected_prev[0] !== 1'bx ) && ( ram_out_prev[0] !== ram_out_expected_prev[0] )
		&& ((ram_out_expected_prev[0] !== last_ram_out_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ram_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ram_out_expected_prev);
		$display ("     Real value = %b", ram_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ram_out_exp[0] = ram_out_expected_prev[0];
	end
	if (
		( ram_out_expected_prev[1] !== 1'bx ) && ( ram_out_prev[1] !== ram_out_expected_prev[1] )
		&& ((ram_out_expected_prev[1] !== last_ram_out_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ram_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ram_out_expected_prev);
		$display ("     Real value = %b", ram_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ram_out_exp[1] = ram_out_expected_prev[1];
	end
	if (
		( ram_out_expected_prev[2] !== 1'bx ) && ( ram_out_prev[2] !== ram_out_expected_prev[2] )
		&& ((ram_out_expected_prev[2] !== last_ram_out_exp[2]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ram_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ram_out_expected_prev);
		$display ("     Real value = %b", ram_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ram_out_exp[2] = ram_out_expected_prev[2];
	end
	if (
		( ram_out_expected_prev[3] !== 1'bx ) && ( ram_out_prev[3] !== ram_out_expected_prev[3] )
		&& ((ram_out_expected_prev[3] !== last_ram_out_exp[3]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ram_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ram_out_expected_prev);
		$display ("     Real value = %b", ram_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ram_out_exp[3] = ram_out_expected_prev[3];
	end
	if (
		( ram_out_expected_prev[4] !== 1'bx ) && ( ram_out_prev[4] !== ram_out_expected_prev[4] )
		&& ((ram_out_expected_prev[4] !== last_ram_out_exp[4]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ram_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ram_out_expected_prev);
		$display ("     Real value = %b", ram_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ram_out_exp[4] = ram_out_expected_prev[4];
	end
	if (
		( ram_out_expected_prev[5] !== 1'bx ) && ( ram_out_prev[5] !== ram_out_expected_prev[5] )
		&& ((ram_out_expected_prev[5] !== last_ram_out_exp[5]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ram_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ram_out_expected_prev);
		$display ("     Real value = %b", ram_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ram_out_exp[5] = ram_out_expected_prev[5];
	end
	if (
		( ram_out_expected_prev[6] !== 1'bx ) && ( ram_out_prev[6] !== ram_out_expected_prev[6] )
		&& ((ram_out_expected_prev[6] !== last_ram_out_exp[6]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ram_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ram_out_expected_prev);
		$display ("     Real value = %b", ram_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ram_out_exp[6] = ram_out_expected_prev[6];
	end
	if (
		( ram_out_expected_prev[7] !== 1'bx ) && ( ram_out_prev[7] !== ram_out_expected_prev[7] )
		&& ((ram_out_expected_prev[7] !== last_ram_out_exp[7]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ram_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ram_out_expected_prev);
		$display ("     Real value = %b", ram_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ram_out_exp[7] = ram_out_expected_prev[7];
	end
	if (
		( Wr_ABCD_expected_prev !== 1'bx ) && ( Wr_ABCD_prev !== Wr_ABCD_expected_prev )
		&& ((Wr_ABCD_expected_prev !== last_Wr_ABCD_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Wr_ABCD :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Wr_ABCD_expected_prev);
		$display ("     Real value = %b", Wr_ABCD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_Wr_ABCD_exp = Wr_ABCD_expected_prev;
	end
	if (
		( write_data_expected_prev[0] !== 1'bx ) && ( write_data_prev[0] !== write_data_expected_prev[0] )
		&& ((write_data_expected_prev[0] !== last_write_data_exp[0]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_data[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_data_expected_prev);
		$display ("     Real value = %b", write_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_write_data_exp[0] = write_data_expected_prev[0];
	end
	if (
		( write_data_expected_prev[1] !== 1'bx ) && ( write_data_prev[1] !== write_data_expected_prev[1] )
		&& ((write_data_expected_prev[1] !== last_write_data_exp[1]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_data[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_data_expected_prev);
		$display ("     Real value = %b", write_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_write_data_exp[1] = write_data_expected_prev[1];
	end
	if (
		( write_data_expected_prev[2] !== 1'bx ) && ( write_data_prev[2] !== write_data_expected_prev[2] )
		&& ((write_data_expected_prev[2] !== last_write_data_exp[2]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_data[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_data_expected_prev);
		$display ("     Real value = %b", write_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_write_data_exp[2] = write_data_expected_prev[2];
	end
	if (
		( write_data_expected_prev[3] !== 1'bx ) && ( write_data_prev[3] !== write_data_expected_prev[3] )
		&& ((write_data_expected_prev[3] !== last_write_data_exp[3]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_data[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_data_expected_prev);
		$display ("     Real value = %b", write_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_write_data_exp[3] = write_data_expected_prev[3];
	end
	if (
		( write_data_expected_prev[4] !== 1'bx ) && ( write_data_prev[4] !== write_data_expected_prev[4] )
		&& ((write_data_expected_prev[4] !== last_write_data_exp[4]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_data[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_data_expected_prev);
		$display ("     Real value = %b", write_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_write_data_exp[4] = write_data_expected_prev[4];
	end
	if (
		( write_data_expected_prev[5] !== 1'bx ) && ( write_data_prev[5] !== write_data_expected_prev[5] )
		&& ((write_data_expected_prev[5] !== last_write_data_exp[5]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_data[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_data_expected_prev);
		$display ("     Real value = %b", write_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_write_data_exp[5] = write_data_expected_prev[5];
	end
	if (
		( write_data_expected_prev[6] !== 1'bx ) && ( write_data_prev[6] !== write_data_expected_prev[6] )
		&& ((write_data_expected_prev[6] !== last_write_data_exp[6]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_data[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_data_expected_prev);
		$display ("     Real value = %b", write_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_write_data_exp[6] = write_data_expected_prev[6];
	end
	if (
		( write_data_expected_prev[7] !== 1'bx ) && ( write_data_prev[7] !== write_data_expected_prev[7] )
		&& ((write_data_expected_prev[7] !== last_write_data_exp[7]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port write_data[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", write_data_expected_prev);
		$display ("     Real value = %b", write_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_write_data_exp[7] = write_data_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Processador_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk27;
reg [7:0] sw;
reg sw17;
// wires                                               
wire [7:0] A;
wire [7:0] B;
wire [7:0] C;
wire [7:0] D;
wire [7:0] entrada2;
wire Ld_IR;
wire Ld_mar_ABCD;
wire Ld_PC;
wire [7:0] opcode;
wire [6:0] out0;
wire [6:0] out1;
wire [6:0] out2;
wire [7:0] pc;
wire [7:0] ram_out;
wire Wr_ABCD;
wire [7:0] write_data;

wire sampler;                             

// assign statements (if any)                          
Processador i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.C(C),
	.clk27(clk27),
	.D(D),
	.entrada2(entrada2),
	.Ld_IR(Ld_IR),
	.Ld_mar_ABCD(Ld_mar_ABCD),
	.Ld_PC(Ld_PC),
	.opcode(opcode),
	.out0(out0),
	.out1(out1),
	.out2(out2),
	.pc(pc),
	.ram_out(ram_out),
	.sw(sw),
	.sw17(sw17),
	.Wr_ABCD(Wr_ABCD),
	.write_data(write_data)
);

// clk27
always
begin
	clk27 = 1'b0;
	clk27 = #250 1'b1;
	#250;
end 
// sw[ 7 ]
initial
begin
	sw[7] = 1'b0;
end 
// sw[ 6 ]
initial
begin
	sw[6] = 1'b0;
end 
// sw[ 5 ]
initial
begin
	sw[5] = 1'b0;
end 
// sw[ 4 ]
initial
begin
	sw[4] = 1'b0;
end 
// sw[ 3 ]
initial
begin
	sw[3] = 1'b0;
end 
// sw[ 2 ]
initial
begin
	sw[2] = 1'b0;
end 
// sw[ 1 ]
initial
begin
	sw[1] = 1'b0;
end 
// sw[ 0 ]
initial
begin
	sw[0] = 1'b0;
end 

// sw17
initial
begin
	sw17 = 1'b0;
end 

Processador_vlg_sample_tst tb_sample (
	.clk27(clk27),
	.sw(sw),
	.sw17(sw17),
	.sampler_tx(sampler)
);

Processador_vlg_check_tst tb_out(
	.A(A),
	.B(B),
	.C(C),
	.D(D),
	.entrada2(entrada2),
	.Ld_IR(Ld_IR),
	.Ld_mar_ABCD(Ld_mar_ABCD),
	.Ld_PC(Ld_PC),
	.opcode(opcode),
	.out0(out0),
	.out1(out1),
	.out2(out2),
	.pc(pc),
	.ram_out(ram_out),
	.Wr_ABCD(Wr_ABCD),
	.write_data(write_data),
	.sampler_rx(sampler)
);
endmodule

