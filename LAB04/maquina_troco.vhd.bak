library ieee;
use ieee.std_logic_1164.all;

entity maquina_troco is
    port(V: in std_logic_vector(9 downto 0);
         tem_moeda: in std_logic_vector(5 downto 0);
         new_troco, clock: in std_logic;
         processando, sem_trocado: out std_logic;
         out_moeda: out std_logic_vector(5 downto 0));
end maquina_troco;

architecture change_machine of maquina_troco is

component operations is
    port(moeda_value, moeda_value_a2, value: in std_logic_vector(9 downto 0);
         trocar_moeda, manter_moeda, ultima_moeda: out std_logic;
         next_value: out std_logic_vector(9 downto 0));
end component;

component mux_reg_atual is
    port(V, saida_subtrator: std_logic_vector(9 downto 0);
         new_troco, processando: std_logic;
         in_reg: std_logic_vector(9 downto 0));
end component;

component registrador is
    port(registrador_in: in std_logic_vector(9 downto 0);
        ld, clear, clk: in std_logic;
        registrador_out: out std_logic_vector(9 downto 0));
end component;

component seletor_moeda is
    port(is_there_coin: in std_logic_vector(5 downto 0);
         clock, clear, number_small: in std_logic;
         valor_moeda, valor_moeda_a2: out std_logic_vector(9 downto 0);
         ran_out_of_coins: out std_logic);
end component;

component decod_moeda_out is
    port(valor_moeda: in std_logic_vector(9 downto 0);
         manter_moeda, ultima_moeda: in std_logic;
         out_moeda: out std_logic_vector(5 downto 0));
end component;

component FFD is
	port(clk,D,P,C:in bit;
		q:out bit);
end component;

signal clear_seletor_moeda, trocar_moeda, manter_moeda: std_logic;
signal ultima_moeda, processando_aux =: '0', sem_trocado_aux: std_logic;
signal valor_moeda, valor_moeda_a2, value, next_value, out_mux: std_logic_vector(9 downto 0);
signal out_moeda_aux: std_logic_vector(5 downto 0);

begin

clear_seletor_moeda <= sem_trocado or (not processando_aux and new_troco);

OPERACIONAL: operations port map(valor_moeda, valor_moeda_a2, value, trocar_moeda, manter_moeda, ultima_moeda, next_value);

MUXREGATUAL: mux_reg_atual port map(V, next_value, new_troco, processando_aux, out_mux);

CONTROLLER: seletor_moeda port map(tem_moeda, clock, clear_seletor_moeda, trocar_moeda, valor_moeda, valor_moeda_a2, sem_trocado_aux);

REG: registrador port map(out_mux, , '0', clock, value);

DECODOUT: decod_moeda_out port map(valor_moeda, manter_moeda, ultima_moeda, out_moeda_aux);

PROCESSREG: ffd port map(clock, processando_aux or new_troco, '1', ultima_moeda, processando_aux);

out_moeda <= out_moeda_aux;

processando <= processando_aux;

sem_trocado <= sem_trocado_aux;

end change_machine;