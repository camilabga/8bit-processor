// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/11/2018 17:25:22"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    lab04
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab04_vlg_sample_tst(
	clk_27,
	key2,
	key3,
	sw,
	sampler_tx
);
input  clk_27;
input  key2;
input  key3;
input [5:0] sw;
output sampler_tx;

reg sample;
time current_time;
always @(clk_27 or key2 or key3 or sw)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module lab04_vlg_check_tst (
	hex0,
	hex1,
	hex2,
	ledg0,
	ledg1,
	ledg2,
	ledg3,
	ledr,
	manter_moeda,
	trocar_moeda,
	ultima_moeda,
	valor_V,
	sampler_rx
);
input [6:0] hex0;
input [6:0] hex1;
input [6:0] hex2;
input  ledg0;
input  ledg1;
input  ledg2;
input  ledg3;
input [5:0] ledr;
input  manter_moeda;
input  trocar_moeda;
input  ultima_moeda;
input [9:0] valor_V;
input sampler_rx;

reg [6:0] hex0_expected;
reg [6:0] hex1_expected;
reg [6:0] hex2_expected;
reg  ledg0_expected;
reg  ledg1_expected;
reg  ledg2_expected;
reg  ledg3_expected;
reg [5:0] ledr_expected;
reg  manter_moeda_expected;
reg  trocar_moeda_expected;
reg  ultima_moeda_expected;
reg [9:0] valor_V_expected;

reg [6:0] hex0_prev;
reg [6:0] hex1_prev;
reg [6:0] hex2_prev;
reg  ledg0_prev;
reg  ledg1_prev;
reg  ledg2_prev;
reg  ledg3_prev;
reg [5:0] ledr_prev;
reg  manter_moeda_prev;
reg  trocar_moeda_prev;
reg  ultima_moeda_prev;
reg [9:0] valor_V_prev;

reg  ledg0_expected_prev;
reg  ledg1_expected_prev;
reg  ledg2_expected_prev;
reg  ledg3_expected_prev;
reg [5:0] ledr_expected_prev;
reg  manter_moeda_expected_prev;
reg  trocar_moeda_expected_prev;
reg  ultima_moeda_expected_prev;
reg [9:0] valor_V_expected_prev;

reg  last_ledg0_exp;
reg  last_ledg1_exp;
reg  last_ledg2_exp;
reg  last_ledg3_exp;
reg [5:0] last_ledr_exp;
reg  last_manter_moeda_exp;
reg  last_trocar_moeda_exp;
reg  last_ultima_moeda_exp;
reg [9:0] last_valor_V_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:12] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 12'b1;
end

// update real /o prevs

always @(trigger)
begin
	hex0_prev = hex0;
	hex1_prev = hex1;
	hex2_prev = hex2;
	ledg0_prev = ledg0;
	ledg1_prev = ledg1;
	ledg2_prev = ledg2;
	ledg3_prev = ledg3;
	ledr_prev = ledr;
	manter_moeda_prev = manter_moeda;
	trocar_moeda_prev = trocar_moeda;
	ultima_moeda_prev = ultima_moeda;
	valor_V_prev = valor_V;
end

// update expected /o prevs

always @(trigger)
begin
	ledg0_expected_prev = ledg0_expected;
	ledg1_expected_prev = ledg1_expected;
	ledg2_expected_prev = ledg2_expected;
	ledg3_expected_prev = ledg3_expected;
	ledr_expected_prev = ledr_expected;
	manter_moeda_expected_prev = manter_moeda_expected;
	trocar_moeda_expected_prev = trocar_moeda_expected;
	ultima_moeda_expected_prev = ultima_moeda_expected;
	valor_V_expected_prev = valor_V_expected;
end



// expected ledg0
initial
begin
	ledg0_expected = 1'bX;
end 

// expected ledg1
initial
begin
	ledg1_expected = 1'bX;
end 

// expected ledg2
initial
begin
	ledg2_expected = 1'bX;
end 

// expected ledg3
initial
begin
	ledg3_expected = 1'bX;
end 
// expected ledr[ 5 ]
initial
begin
	ledr_expected[5] = 1'bX;
end 
// expected ledr[ 4 ]
initial
begin
	ledr_expected[4] = 1'bX;
end 
// expected ledr[ 3 ]
initial
begin
	ledr_expected[3] = 1'bX;
end 
// expected ledr[ 2 ]
initial
begin
	ledr_expected[2] = 1'bX;
end 
// expected ledr[ 1 ]
initial
begin
	ledr_expected[1] = 1'bX;
end 
// expected ledr[ 0 ]
initial
begin
	ledr_expected[0] = 1'bX;
end 
// expected valor_V[ 9 ]
initial
begin
	valor_V_expected[9] = 1'bX;
end 
// expected valor_V[ 8 ]
initial
begin
	valor_V_expected[8] = 1'bX;
end 
// expected valor_V[ 7 ]
initial
begin
	valor_V_expected[7] = 1'bX;
end 
// expected valor_V[ 6 ]
initial
begin
	valor_V_expected[6] = 1'bX;
end 
// expected valor_V[ 5 ]
initial
begin
	valor_V_expected[5] = 1'bX;
end 
// expected valor_V[ 4 ]
initial
begin
	valor_V_expected[4] = 1'bX;
end 
// expected valor_V[ 3 ]
initial
begin
	valor_V_expected[3] = 1'bX;
end 
// expected valor_V[ 2 ]
initial
begin
	valor_V_expected[2] = 1'bX;
end 
// expected valor_V[ 1 ]
initial
begin
	valor_V_expected[1] = 1'bX;
end 
// expected valor_V[ 0 ]
initial
begin
	valor_V_expected[0] = 1'bX;
end 

// expected ultima_moeda
initial
begin
	ultima_moeda_expected = 1'bX;
end 

// expected trocar_moeda
initial
begin
	trocar_moeda_expected = 1'bX;
end 

// expected manter_moeda
initial
begin
	manter_moeda_expected = 1'bX;
end 
// generate trigger
always @(hex0_expected or hex0 or hex1_expected or hex1 or hex2_expected or hex2 or ledg0_expected or ledg0 or ledg1_expected or ledg1 or ledg2_expected or ledg2 or ledg3_expected or ledg3 or ledr_expected or ledr or manter_moeda_expected or manter_moeda or trocar_moeda_expected or trocar_moeda or ultima_moeda_expected or ultima_moeda or valor_V_expected or valor_V)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected hex0 = %b | expected hex1 = %b | expected hex2 = %b | expected ledg0 = %b | expected ledg1 = %b | expected ledg2 = %b | expected ledg3 = %b | expected ledr = %b | expected manter_moeda = %b | expected trocar_moeda = %b | expected ultima_moeda = %b | expected valor_V = %b | ",hex0_expected_prev,hex1_expected_prev,hex2_expected_prev,ledg0_expected_prev,ledg1_expected_prev,ledg2_expected_prev,ledg3_expected_prev,ledr_expected_prev,manter_moeda_expected_prev,trocar_moeda_expected_prev,ultima_moeda_expected_prev,valor_V_expected_prev);
	$display("| real hex0 = %b | real hex1 = %b | real hex2 = %b | real ledg0 = %b | real ledg1 = %b | real ledg2 = %b | real ledg3 = %b | real ledr = %b | real manter_moeda = %b | real trocar_moeda = %b | real ultima_moeda = %b | real valor_V = %b | ",hex0_prev,hex1_prev,hex2_prev,ledg0_prev,ledg1_prev,ledg2_prev,ledg3_prev,ledr_prev,manter_moeda_prev,trocar_moeda_prev,ultima_moeda_prev,valor_V_prev);
`endif
	if (
		( ledg0_expected_prev !== 1'bx ) && ( ledg0_prev !== ledg0_expected_prev )
		&& ((ledg0_expected_prev !== last_ledg0_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledg0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledg0_expected_prev);
		$display ("     Real value = %b", ledg0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ledg0_exp = ledg0_expected_prev;
	end
	if (
		( ledg1_expected_prev !== 1'bx ) && ( ledg1_prev !== ledg1_expected_prev )
		&& ((ledg1_expected_prev !== last_ledg1_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledg1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledg1_expected_prev);
		$display ("     Real value = %b", ledg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ledg1_exp = ledg1_expected_prev;
	end
	if (
		( ledg2_expected_prev !== 1'bx ) && ( ledg2_prev !== ledg2_expected_prev )
		&& ((ledg2_expected_prev !== last_ledg2_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledg2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledg2_expected_prev);
		$display ("     Real value = %b", ledg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ledg2_exp = ledg2_expected_prev;
	end
	if (
		( ledg3_expected_prev !== 1'bx ) && ( ledg3_prev !== ledg3_expected_prev )
		&& ((ledg3_expected_prev !== last_ledg3_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledg3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledg3_expected_prev);
		$display ("     Real value = %b", ledg3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_ledg3_exp = ledg3_expected_prev;
	end
	if (
		( ledr_expected_prev[0] !== 1'bx ) && ( ledr_prev[0] !== ledr_expected_prev[0] )
		&& ((ledr_expected_prev[0] !== last_ledr_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledr[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledr_expected_prev);
		$display ("     Real value = %b", ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ledr_exp[0] = ledr_expected_prev[0];
	end
	if (
		( ledr_expected_prev[1] !== 1'bx ) && ( ledr_prev[1] !== ledr_expected_prev[1] )
		&& ((ledr_expected_prev[1] !== last_ledr_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledr[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledr_expected_prev);
		$display ("     Real value = %b", ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ledr_exp[1] = ledr_expected_prev[1];
	end
	if (
		( ledr_expected_prev[2] !== 1'bx ) && ( ledr_prev[2] !== ledr_expected_prev[2] )
		&& ((ledr_expected_prev[2] !== last_ledr_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledr[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledr_expected_prev);
		$display ("     Real value = %b", ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ledr_exp[2] = ledr_expected_prev[2];
	end
	if (
		( ledr_expected_prev[3] !== 1'bx ) && ( ledr_prev[3] !== ledr_expected_prev[3] )
		&& ((ledr_expected_prev[3] !== last_ledr_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledr[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledr_expected_prev);
		$display ("     Real value = %b", ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ledr_exp[3] = ledr_expected_prev[3];
	end
	if (
		( ledr_expected_prev[4] !== 1'bx ) && ( ledr_prev[4] !== ledr_expected_prev[4] )
		&& ((ledr_expected_prev[4] !== last_ledr_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledr[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledr_expected_prev);
		$display ("     Real value = %b", ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ledr_exp[4] = ledr_expected_prev[4];
	end
	if (
		( ledr_expected_prev[5] !== 1'bx ) && ( ledr_prev[5] !== ledr_expected_prev[5] )
		&& ((ledr_expected_prev[5] !== last_ledr_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledr[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledr_expected_prev);
		$display ("     Real value = %b", ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ledr_exp[5] = ledr_expected_prev[5];
	end
	if (
		( manter_moeda_expected_prev !== 1'bx ) && ( manter_moeda_prev !== manter_moeda_expected_prev )
		&& ((manter_moeda_expected_prev !== last_manter_moeda_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port manter_moeda :: @time = %t",  $realtime);
		$display ("     Expected value = %b", manter_moeda_expected_prev);
		$display ("     Real value = %b", manter_moeda_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_manter_moeda_exp = manter_moeda_expected_prev;
	end
	if (
		( trocar_moeda_expected_prev !== 1'bx ) && ( trocar_moeda_prev !== trocar_moeda_expected_prev )
		&& ((trocar_moeda_expected_prev !== last_trocar_moeda_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port trocar_moeda :: @time = %t",  $realtime);
		$display ("     Expected value = %b", trocar_moeda_expected_prev);
		$display ("     Real value = %b", trocar_moeda_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_trocar_moeda_exp = trocar_moeda_expected_prev;
	end
	if (
		( ultima_moeda_expected_prev !== 1'bx ) && ( ultima_moeda_prev !== ultima_moeda_expected_prev )
		&& ((ultima_moeda_expected_prev !== last_ultima_moeda_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ultima_moeda :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ultima_moeda_expected_prev);
		$display ("     Real value = %b", ultima_moeda_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_ultima_moeda_exp = ultima_moeda_expected_prev;
	end
	if (
		( valor_V_expected_prev[0] !== 1'bx ) && ( valor_V_prev[0] !== valor_V_expected_prev[0] )
		&& ((valor_V_expected_prev[0] !== last_valor_V_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor_V[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor_V_expected_prev);
		$display ("     Real value = %b", valor_V_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_valor_V_exp[0] = valor_V_expected_prev[0];
	end
	if (
		( valor_V_expected_prev[1] !== 1'bx ) && ( valor_V_prev[1] !== valor_V_expected_prev[1] )
		&& ((valor_V_expected_prev[1] !== last_valor_V_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor_V[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor_V_expected_prev);
		$display ("     Real value = %b", valor_V_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_valor_V_exp[1] = valor_V_expected_prev[1];
	end
	if (
		( valor_V_expected_prev[2] !== 1'bx ) && ( valor_V_prev[2] !== valor_V_expected_prev[2] )
		&& ((valor_V_expected_prev[2] !== last_valor_V_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor_V[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor_V_expected_prev);
		$display ("     Real value = %b", valor_V_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_valor_V_exp[2] = valor_V_expected_prev[2];
	end
	if (
		( valor_V_expected_prev[3] !== 1'bx ) && ( valor_V_prev[3] !== valor_V_expected_prev[3] )
		&& ((valor_V_expected_prev[3] !== last_valor_V_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor_V[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor_V_expected_prev);
		$display ("     Real value = %b", valor_V_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_valor_V_exp[3] = valor_V_expected_prev[3];
	end
	if (
		( valor_V_expected_prev[4] !== 1'bx ) && ( valor_V_prev[4] !== valor_V_expected_prev[4] )
		&& ((valor_V_expected_prev[4] !== last_valor_V_exp[4]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor_V[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor_V_expected_prev);
		$display ("     Real value = %b", valor_V_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_valor_V_exp[4] = valor_V_expected_prev[4];
	end
	if (
		( valor_V_expected_prev[5] !== 1'bx ) && ( valor_V_prev[5] !== valor_V_expected_prev[5] )
		&& ((valor_V_expected_prev[5] !== last_valor_V_exp[5]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor_V[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor_V_expected_prev);
		$display ("     Real value = %b", valor_V_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_valor_V_exp[5] = valor_V_expected_prev[5];
	end
	if (
		( valor_V_expected_prev[6] !== 1'bx ) && ( valor_V_prev[6] !== valor_V_expected_prev[6] )
		&& ((valor_V_expected_prev[6] !== last_valor_V_exp[6]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor_V[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor_V_expected_prev);
		$display ("     Real value = %b", valor_V_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_valor_V_exp[6] = valor_V_expected_prev[6];
	end
	if (
		( valor_V_expected_prev[7] !== 1'bx ) && ( valor_V_prev[7] !== valor_V_expected_prev[7] )
		&& ((valor_V_expected_prev[7] !== last_valor_V_exp[7]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor_V[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor_V_expected_prev);
		$display ("     Real value = %b", valor_V_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_valor_V_exp[7] = valor_V_expected_prev[7];
	end
	if (
		( valor_V_expected_prev[8] !== 1'bx ) && ( valor_V_prev[8] !== valor_V_expected_prev[8] )
		&& ((valor_V_expected_prev[8] !== last_valor_V_exp[8]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor_V[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor_V_expected_prev);
		$display ("     Real value = %b", valor_V_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_valor_V_exp[8] = valor_V_expected_prev[8];
	end
	if (
		( valor_V_expected_prev[9] !== 1'bx ) && ( valor_V_prev[9] !== valor_V_expected_prev[9] )
		&& ((valor_V_expected_prev[9] !== last_valor_V_exp[9]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port valor_V[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", valor_V_expected_prev);
		$display ("     Real value = %b", valor_V_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_valor_V_exp[9] = valor_V_expected_prev[9];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module lab04_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk_27;
reg key2;
reg key3;
reg [5:0] sw;
// wires                                               
wire [6:0] hex0;
wire [6:0] hex1;
wire [6:0] hex2;
wire ledg0;
wire ledg1;
wire ledg2;
wire ledg3;
wire [5:0] ledr;
wire manter_moeda;
wire trocar_moeda;
wire ultima_moeda;
wire [9:0] valor_V;

wire sampler;                             

// assign statements (if any)                          
lab04 i1 (
// port map - connection between master ports and signals/registers   
	.clk_27(clk_27),
	.hex0(hex0),
	.hex1(hex1),
	.hex2(hex2),
	.key2(key2),
	.key3(key3),
	.ledg0(ledg0),
	.ledg1(ledg1),
	.ledg2(ledg2),
	.ledg3(ledg3),
	.ledr(ledr),
	.manter_moeda(manter_moeda),
	.sw(sw),
	.trocar_moeda(trocar_moeda),
	.ultima_moeda(ultima_moeda),
	.valor_V(valor_V)
);

// clk_27
always
begin
	clk_27 = 1'b0;
	clk_27 = #500 1'b1;
	#500;
end 

// key2
initial
begin
	key2 = 1'b1;
	key2 = #20000 1'b0;
	key2 = #60000 1'b1;
	key2 = #500000 1'b0;
	key2 = #40000 1'b1;
	key2 = #230000 1'b0;
	key2 = #40000 1'b1;
end 

// key3
initial
begin
	key3 = 1'b1;
end 
// sw[ 5 ]
initial
begin
	sw[5] = 1'b0;
	sw[5] = #400000 1'b1;
end 
// sw[ 4 ]
initial
begin
	sw[4] = 1'b1;
end 
// sw[ 3 ]
initial
begin
	sw[3] = 1'b1;
	sw[3] = #400000 1'b0;
	sw[3] = #130000 1'b1;
end 
// sw[ 2 ]
initial
begin
	sw[2] = 1'b1;
end 
// sw[ 1 ]
initial
begin
	sw[1] = 1'b1;
end 
// sw[ 0 ]
initial
begin
	sw[0] = 1'b1;
end 

lab04_vlg_sample_tst tb_sample (
	.clk_27(clk_27),
	.key2(key2),
	.key3(key3),
	.sw(sw),
	.sampler_tx(sampler)
);

lab04_vlg_check_tst tb_out(
	.hex0(hex0),
	.hex1(hex1),
	.hex2(hex2),
	.ledg0(ledg0),
	.ledg1(ledg1),
	.ledg2(ledg2),
	.ledg3(ledg3),
	.ledr(ledr),
	.manter_moeda(manter_moeda),
	.trocar_moeda(trocar_moeda),
	.ultima_moeda(ultima_moeda),
	.valor_V(valor_V),
	.sampler_rx(sampler)
);
endmodule

