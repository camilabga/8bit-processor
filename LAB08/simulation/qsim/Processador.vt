// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/07/2018 11:35:09"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    processador_perifericos_timer
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module processador_perifericos_timer_vlg_sample_tst(
	clk27,
	KEY3_0,
	SW7_0,
	SW15_8,
	sampler_tx
);
input  clk27;
input [3:0] KEY3_0;
input [7:0] SW7_0;
input [7:0] SW15_8;
output sampler_tx;

reg sample;
time current_time;
always @(clk27 or KEY3_0 or SW7_0 or SW15_8)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module processador_perifericos_timer_vlg_check_tst (
	HEX0,
	HEX1,
	HEX2,
	HEX3,
	HEX4,
	HEX5,
	HEX6,
	HEX7,
	LEDG7_0,
	LEDR7_0,
	LEDR15_8,
	LEDR17,
	opcode,
	ram_out,
	sampler_rx
);
input [6:0] HEX0;
input [6:0] HEX1;
input [6:0] HEX2;
input [6:0] HEX3;
input [6:0] HEX4;
input [6:0] HEX5;
input [6:0] HEX6;
input [6:0] HEX7;
input [7:0] LEDG7_0;
input [7:0] LEDR7_0;
input [7:0] LEDR15_8;
input  LEDR17;
input [7:0] opcode;
input [7:0] ram_out;
input sampler_rx;

reg [6:0] HEX0_expected;
reg [6:0] HEX1_expected;
reg [6:0] HEX2_expected;
reg [6:0] HEX3_expected;
reg [6:0] HEX4_expected;
reg [6:0] HEX5_expected;
reg [6:0] HEX6_expected;
reg [6:0] HEX7_expected;
reg [7:0] LEDG7_0_expected;
reg [7:0] LEDR7_0_expected;
reg [7:0] LEDR15_8_expected;
reg  LEDR17_expected;
reg [7:0] opcode_expected;
reg [7:0] ram_out_expected;

reg [6:0] HEX0_prev;
reg [6:0] HEX1_prev;
reg [6:0] HEX2_prev;
reg [6:0] HEX3_prev;
reg [6:0] HEX4_prev;
reg [6:0] HEX5_prev;
reg [6:0] HEX6_prev;
reg [6:0] HEX7_prev;
reg [7:0] LEDG7_0_prev;
reg [7:0] LEDR7_0_prev;
reg [7:0] LEDR15_8_prev;
reg  LEDR17_prev;
reg [7:0] opcode_prev;
reg [7:0] ram_out_prev;

reg [6:0] HEX0_expected_prev;
reg [6:0] HEX1_expected_prev;
reg [6:0] HEX2_expected_prev;
reg [6:0] HEX3_expected_prev;
reg [6:0] HEX4_expected_prev;
reg [6:0] HEX5_expected_prev;
reg [6:0] HEX6_expected_prev;
reg [6:0] HEX7_expected_prev;
reg [7:0] LEDG7_0_expected_prev;
reg [7:0] LEDR7_0_expected_prev;
reg [7:0] LEDR15_8_expected_prev;
reg  LEDR17_expected_prev;
reg [7:0] opcode_expected_prev;
reg [7:0] ram_out_expected_prev;

reg [6:0] last_HEX0_exp;
reg [6:0] last_HEX1_exp;
reg [6:0] last_HEX2_exp;
reg [6:0] last_HEX3_exp;
reg [6:0] last_HEX4_exp;
reg [6:0] last_HEX5_exp;
reg [6:0] last_HEX6_exp;
reg [6:0] last_HEX7_exp;
reg [7:0] last_LEDG7_0_exp;
reg [7:0] last_LEDR7_0_exp;
reg [7:0] last_LEDR15_8_exp;
reg  last_LEDR17_exp;
reg [7:0] last_opcode_exp;
reg [7:0] last_ram_out_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:14] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 14'b1;
end

// update real /o prevs

always @(trigger)
begin
	HEX0_prev = HEX0;
	HEX1_prev = HEX1;
	HEX2_prev = HEX2;
	HEX3_prev = HEX3;
	HEX4_prev = HEX4;
	HEX5_prev = HEX5;
	HEX6_prev = HEX6;
	HEX7_prev = HEX7;
	LEDG7_0_prev = LEDG7_0;
	LEDR7_0_prev = LEDR7_0;
	LEDR15_8_prev = LEDR15_8;
	LEDR17_prev = LEDR17;
	opcode_prev = opcode;
	ram_out_prev = ram_out;
end

// update expected /o prevs

always @(trigger)
begin
	HEX0_expected_prev = HEX0_expected;
	HEX1_expected_prev = HEX1_expected;
	HEX2_expected_prev = HEX2_expected;
	HEX3_expected_prev = HEX3_expected;
	HEX4_expected_prev = HEX4_expected;
	HEX5_expected_prev = HEX5_expected;
	HEX6_expected_prev = HEX6_expected;
	HEX7_expected_prev = HEX7_expected;
	LEDG7_0_expected_prev = LEDG7_0_expected;
	LEDR7_0_expected_prev = LEDR7_0_expected;
	LEDR15_8_expected_prev = LEDR15_8_expected;
	LEDR17_expected_prev = LEDR17_expected;
	opcode_expected_prev = opcode_expected;
	ram_out_expected_prev = ram_out_expected;
end



// expected LEDR17
initial
begin
	LEDR17_expected = 1'bX;
end 
// expected HEX0[ 6 ]
initial
begin
	HEX0_expected[6] = 1'bX;
end 
// expected HEX0[ 5 ]
initial
begin
	HEX0_expected[5] = 1'bX;
end 
// expected HEX0[ 4 ]
initial
begin
	HEX0_expected[4] = 1'bX;
end 
// expected HEX0[ 3 ]
initial
begin
	HEX0_expected[3] = 1'bX;
end 
// expected HEX0[ 2 ]
initial
begin
	HEX0_expected[2] = 1'bX;
end 
// expected HEX0[ 1 ]
initial
begin
	HEX0_expected[1] = 1'bX;
end 
// expected HEX0[ 0 ]
initial
begin
	HEX0_expected[0] = 1'bX;
end 
// expected HEX1[ 6 ]
initial
begin
	HEX1_expected[6] = 1'bX;
end 
// expected HEX1[ 5 ]
initial
begin
	HEX1_expected[5] = 1'bX;
end 
// expected HEX1[ 4 ]
initial
begin
	HEX1_expected[4] = 1'bX;
end 
// expected HEX1[ 3 ]
initial
begin
	HEX1_expected[3] = 1'bX;
end 
// expected HEX1[ 2 ]
initial
begin
	HEX1_expected[2] = 1'bX;
end 
// expected HEX1[ 1 ]
initial
begin
	HEX1_expected[1] = 1'bX;
end 
// expected HEX1[ 0 ]
initial
begin
	HEX1_expected[0] = 1'bX;
end 
// expected HEX2[ 6 ]
initial
begin
	HEX2_expected[6] = 1'bX;
end 
// expected HEX2[ 5 ]
initial
begin
	HEX2_expected[5] = 1'bX;
end 
// expected HEX2[ 4 ]
initial
begin
	HEX2_expected[4] = 1'bX;
end 
// expected HEX2[ 3 ]
initial
begin
	HEX2_expected[3] = 1'bX;
end 
// expected HEX2[ 2 ]
initial
begin
	HEX2_expected[2] = 1'bX;
end 
// expected HEX2[ 1 ]
initial
begin
	HEX2_expected[1] = 1'bX;
end 
// expected HEX2[ 0 ]
initial
begin
	HEX2_expected[0] = 1'bX;
end 
// expected HEX3[ 6 ]
initial
begin
	HEX3_expected[6] = 1'bX;
end 
// expected HEX3[ 5 ]
initial
begin
	HEX3_expected[5] = 1'bX;
end 
// expected HEX3[ 4 ]
initial
begin
	HEX3_expected[4] = 1'bX;
end 
// expected HEX3[ 3 ]
initial
begin
	HEX3_expected[3] = 1'bX;
end 
// expected HEX3[ 2 ]
initial
begin
	HEX3_expected[2] = 1'bX;
end 
// expected HEX3[ 1 ]
initial
begin
	HEX3_expected[1] = 1'bX;
end 
// expected HEX3[ 0 ]
initial
begin
	HEX3_expected[0] = 1'bX;
end 
// expected HEX4[ 6 ]
initial
begin
	HEX4_expected[6] = 1'bX;
end 
// expected HEX4[ 5 ]
initial
begin
	HEX4_expected[5] = 1'bX;
end 
// expected HEX4[ 4 ]
initial
begin
	HEX4_expected[4] = 1'bX;
end 
// expected HEX4[ 3 ]
initial
begin
	HEX4_expected[3] = 1'bX;
end 
// expected HEX4[ 2 ]
initial
begin
	HEX4_expected[2] = 1'bX;
end 
// expected HEX4[ 1 ]
initial
begin
	HEX4_expected[1] = 1'bX;
end 
// expected HEX4[ 0 ]
initial
begin
	HEX4_expected[0] = 1'bX;
end 
// expected HEX5[ 6 ]
initial
begin
	HEX5_expected[6] = 1'bX;
end 
// expected HEX5[ 5 ]
initial
begin
	HEX5_expected[5] = 1'bX;
end 
// expected HEX5[ 4 ]
initial
begin
	HEX5_expected[4] = 1'bX;
end 
// expected HEX5[ 3 ]
initial
begin
	HEX5_expected[3] = 1'bX;
end 
// expected HEX5[ 2 ]
initial
begin
	HEX5_expected[2] = 1'bX;
end 
// expected HEX5[ 1 ]
initial
begin
	HEX5_expected[1] = 1'bX;
end 
// expected HEX5[ 0 ]
initial
begin
	HEX5_expected[0] = 1'bX;
end 
// expected HEX6[ 6 ]
initial
begin
	HEX6_expected[6] = 1'bX;
end 
// expected HEX6[ 5 ]
initial
begin
	HEX6_expected[5] = 1'bX;
end 
// expected HEX6[ 4 ]
initial
begin
	HEX6_expected[4] = 1'bX;
end 
// expected HEX6[ 3 ]
initial
begin
	HEX6_expected[3] = 1'bX;
end 
// expected HEX6[ 2 ]
initial
begin
	HEX6_expected[2] = 1'bX;
end 
// expected HEX6[ 1 ]
initial
begin
	HEX6_expected[1] = 1'bX;
end 
// expected HEX6[ 0 ]
initial
begin
	HEX6_expected[0] = 1'bX;
end 
// expected HEX7[ 6 ]
initial
begin
	HEX7_expected[6] = 1'bX;
end 
// expected HEX7[ 5 ]
initial
begin
	HEX7_expected[5] = 1'bX;
end 
// expected HEX7[ 4 ]
initial
begin
	HEX7_expected[4] = 1'bX;
end 
// expected HEX7[ 3 ]
initial
begin
	HEX7_expected[3] = 1'bX;
end 
// expected HEX7[ 2 ]
initial
begin
	HEX7_expected[2] = 1'bX;
end 
// expected HEX7[ 1 ]
initial
begin
	HEX7_expected[1] = 1'bX;
end 
// expected HEX7[ 0 ]
initial
begin
	HEX7_expected[0] = 1'bX;
end 
// expected LEDR15_8[ 7 ]
initial
begin
	LEDR15_8_expected[7] = 1'bX;
end 
// expected LEDR15_8[ 6 ]
initial
begin
	LEDR15_8_expected[6] = 1'bX;
end 
// expected LEDR15_8[ 5 ]
initial
begin
	LEDR15_8_expected[5] = 1'bX;
end 
// expected LEDR15_8[ 4 ]
initial
begin
	LEDR15_8_expected[4] = 1'bX;
end 
// expected LEDR15_8[ 3 ]
initial
begin
	LEDR15_8_expected[3] = 1'bX;
end 
// expected LEDR15_8[ 2 ]
initial
begin
	LEDR15_8_expected[2] = 1'bX;
end 
// expected LEDR15_8[ 1 ]
initial
begin
	LEDR15_8_expected[1] = 1'bX;
end 
// expected LEDR15_8[ 0 ]
initial
begin
	LEDR15_8_expected[0] = 1'bX;
end 
// expected LEDG7_0[ 7 ]
initial
begin
	LEDG7_0_expected[7] = 1'bX;
end 
// expected LEDG7_0[ 6 ]
initial
begin
	LEDG7_0_expected[6] = 1'bX;
end 
// expected LEDG7_0[ 5 ]
initial
begin
	LEDG7_0_expected[5] = 1'bX;
end 
// expected LEDG7_0[ 4 ]
initial
begin
	LEDG7_0_expected[4] = 1'bX;
end 
// expected LEDG7_0[ 3 ]
initial
begin
	LEDG7_0_expected[3] = 1'bX;
end 
// expected LEDG7_0[ 2 ]
initial
begin
	LEDG7_0_expected[2] = 1'bX;
end 
// expected LEDG7_0[ 1 ]
initial
begin
	LEDG7_0_expected[1] = 1'bX;
end 
// expected LEDG7_0[ 0 ]
initial
begin
	LEDG7_0_expected[0] = 1'bX;
end 
// expected LEDR7_0[ 7 ]
initial
begin
	LEDR7_0_expected[7] = 1'bX;
end 
// expected LEDR7_0[ 6 ]
initial
begin
	LEDR7_0_expected[6] = 1'bX;
end 
// expected LEDR7_0[ 5 ]
initial
begin
	LEDR7_0_expected[5] = 1'bX;
end 
// expected LEDR7_0[ 4 ]
initial
begin
	LEDR7_0_expected[4] = 1'bX;
end 
// expected LEDR7_0[ 3 ]
initial
begin
	LEDR7_0_expected[3] = 1'bX;
end 
// expected LEDR7_0[ 2 ]
initial
begin
	LEDR7_0_expected[2] = 1'bX;
end 
// expected LEDR7_0[ 1 ]
initial
begin
	LEDR7_0_expected[1] = 1'bX;
end 
// expected LEDR7_0[ 0 ]
initial
begin
	LEDR7_0_expected[0] = 1'bX;
end 
// expected opcode[ 7 ]
initial
begin
	opcode_expected[7] = 1'bX;
end 
// expected opcode[ 6 ]
initial
begin
	opcode_expected[6] = 1'bX;
end 
// expected opcode[ 5 ]
initial
begin
	opcode_expected[5] = 1'bX;
end 
// expected opcode[ 4 ]
initial
begin
	opcode_expected[4] = 1'bX;
end 
// expected opcode[ 3 ]
initial
begin
	opcode_expected[3] = 1'bX;
end 
// expected opcode[ 2 ]
initial
begin
	opcode_expected[2] = 1'bX;
end 
// expected opcode[ 1 ]
initial
begin
	opcode_expected[1] = 1'bX;
end 
// expected opcode[ 0 ]
initial
begin
	opcode_expected[0] = 1'bX;
end 
// expected ram_out[ 7 ]
initial
begin
	ram_out_expected[7] = 1'bX;
end 
// expected ram_out[ 6 ]
initial
begin
	ram_out_expected[6] = 1'bX;
end 
// expected ram_out[ 5 ]
initial
begin
	ram_out_expected[5] = 1'bX;
end 
// expected ram_out[ 4 ]
initial
begin
	ram_out_expected[4] = 1'bX;
end 
// expected ram_out[ 3 ]
initial
begin
	ram_out_expected[3] = 1'bX;
end 
// expected ram_out[ 2 ]
initial
begin
	ram_out_expected[2] = 1'bX;
end 
// expected ram_out[ 1 ]
initial
begin
	ram_out_expected[1] = 1'bX;
end 
// expected ram_out[ 0 ]
initial
begin
	ram_out_expected[0] = 1'bX;
end 
// generate trigger
always @(HEX0_expected or HEX0 or HEX1_expected or HEX1 or HEX2_expected or HEX2 or HEX3_expected or HEX3 or HEX4_expected or HEX4 or HEX5_expected or HEX5 or HEX6_expected or HEX6 or HEX7_expected or HEX7 or LEDG7_0_expected or LEDG7_0 or LEDR7_0_expected or LEDR7_0 or LEDR15_8_expected or LEDR15_8 or LEDR17_expected or LEDR17 or opcode_expected or opcode or ram_out_expected or ram_out)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected HEX0 = %b | expected HEX1 = %b | expected HEX2 = %b | expected HEX3 = %b | expected HEX4 = %b | expected HEX5 = %b | expected HEX6 = %b | expected HEX7 = %b | expected LEDG7_0 = %b | expected LEDR7_0 = %b | expected LEDR15_8 = %b | expected LEDR17 = %b | expected opcode = %b | expected ram_out = %b | ",HEX0_expected_prev,HEX1_expected_prev,HEX2_expected_prev,HEX3_expected_prev,HEX4_expected_prev,HEX5_expected_prev,HEX6_expected_prev,HEX7_expected_prev,LEDG7_0_expected_prev,LEDR7_0_expected_prev,LEDR15_8_expected_prev,LEDR17_expected_prev,opcode_expected_prev,ram_out_expected_prev);
	$display("| real HEX0 = %b | real HEX1 = %b | real HEX2 = %b | real HEX3 = %b | real HEX4 = %b | real HEX5 = %b | real HEX6 = %b | real HEX7 = %b | real LEDG7_0 = %b | real LEDR7_0 = %b | real LEDR15_8 = %b | real LEDR17 = %b | real opcode = %b | real ram_out = %b | ",HEX0_prev,HEX1_prev,HEX2_prev,HEX3_prev,HEX4_prev,HEX5_prev,HEX6_prev,HEX7_prev,LEDG7_0_prev,LEDR7_0_prev,LEDR15_8_prev,LEDR17_prev,opcode_prev,ram_out_prev);
`endif
	if (
		( HEX0_expected_prev[0] !== 1'bx ) && ( HEX0_prev[0] !== HEX0_expected_prev[0] )
		&& ((HEX0_expected_prev[0] !== last_HEX0_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_expected_prev);
		$display ("     Real value = %b", HEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX0_exp[0] = HEX0_expected_prev[0];
	end
	if (
		( HEX0_expected_prev[1] !== 1'bx ) && ( HEX0_prev[1] !== HEX0_expected_prev[1] )
		&& ((HEX0_expected_prev[1] !== last_HEX0_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_expected_prev);
		$display ("     Real value = %b", HEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX0_exp[1] = HEX0_expected_prev[1];
	end
	if (
		( HEX0_expected_prev[2] !== 1'bx ) && ( HEX0_prev[2] !== HEX0_expected_prev[2] )
		&& ((HEX0_expected_prev[2] !== last_HEX0_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_expected_prev);
		$display ("     Real value = %b", HEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX0_exp[2] = HEX0_expected_prev[2];
	end
	if (
		( HEX0_expected_prev[3] !== 1'bx ) && ( HEX0_prev[3] !== HEX0_expected_prev[3] )
		&& ((HEX0_expected_prev[3] !== last_HEX0_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_expected_prev);
		$display ("     Real value = %b", HEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX0_exp[3] = HEX0_expected_prev[3];
	end
	if (
		( HEX0_expected_prev[4] !== 1'bx ) && ( HEX0_prev[4] !== HEX0_expected_prev[4] )
		&& ((HEX0_expected_prev[4] !== last_HEX0_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_expected_prev);
		$display ("     Real value = %b", HEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX0_exp[4] = HEX0_expected_prev[4];
	end
	if (
		( HEX0_expected_prev[5] !== 1'bx ) && ( HEX0_prev[5] !== HEX0_expected_prev[5] )
		&& ((HEX0_expected_prev[5] !== last_HEX0_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_expected_prev);
		$display ("     Real value = %b", HEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX0_exp[5] = HEX0_expected_prev[5];
	end
	if (
		( HEX0_expected_prev[6] !== 1'bx ) && ( HEX0_prev[6] !== HEX0_expected_prev[6] )
		&& ((HEX0_expected_prev[6] !== last_HEX0_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX0_expected_prev);
		$display ("     Real value = %b", HEX0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_HEX0_exp[6] = HEX0_expected_prev[6];
	end
	if (
		( HEX1_expected_prev[0] !== 1'bx ) && ( HEX1_prev[0] !== HEX1_expected_prev[0] )
		&& ((HEX1_expected_prev[0] !== last_HEX1_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX1_expected_prev);
		$display ("     Real value = %b", HEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HEX1_exp[0] = HEX1_expected_prev[0];
	end
	if (
		( HEX1_expected_prev[1] !== 1'bx ) && ( HEX1_prev[1] !== HEX1_expected_prev[1] )
		&& ((HEX1_expected_prev[1] !== last_HEX1_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX1_expected_prev);
		$display ("     Real value = %b", HEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HEX1_exp[1] = HEX1_expected_prev[1];
	end
	if (
		( HEX1_expected_prev[2] !== 1'bx ) && ( HEX1_prev[2] !== HEX1_expected_prev[2] )
		&& ((HEX1_expected_prev[2] !== last_HEX1_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX1_expected_prev);
		$display ("     Real value = %b", HEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HEX1_exp[2] = HEX1_expected_prev[2];
	end
	if (
		( HEX1_expected_prev[3] !== 1'bx ) && ( HEX1_prev[3] !== HEX1_expected_prev[3] )
		&& ((HEX1_expected_prev[3] !== last_HEX1_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX1_expected_prev);
		$display ("     Real value = %b", HEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HEX1_exp[3] = HEX1_expected_prev[3];
	end
	if (
		( HEX1_expected_prev[4] !== 1'bx ) && ( HEX1_prev[4] !== HEX1_expected_prev[4] )
		&& ((HEX1_expected_prev[4] !== last_HEX1_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX1_expected_prev);
		$display ("     Real value = %b", HEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HEX1_exp[4] = HEX1_expected_prev[4];
	end
	if (
		( HEX1_expected_prev[5] !== 1'bx ) && ( HEX1_prev[5] !== HEX1_expected_prev[5] )
		&& ((HEX1_expected_prev[5] !== last_HEX1_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX1_expected_prev);
		$display ("     Real value = %b", HEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HEX1_exp[5] = HEX1_expected_prev[5];
	end
	if (
		( HEX1_expected_prev[6] !== 1'bx ) && ( HEX1_prev[6] !== HEX1_expected_prev[6] )
		&& ((HEX1_expected_prev[6] !== last_HEX1_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX1_expected_prev);
		$display ("     Real value = %b", HEX1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_HEX1_exp[6] = HEX1_expected_prev[6];
	end
	if (
		( HEX2_expected_prev[0] !== 1'bx ) && ( HEX2_prev[0] !== HEX2_expected_prev[0] )
		&& ((HEX2_expected_prev[0] !== last_HEX2_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX2_expected_prev);
		$display ("     Real value = %b", HEX2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_HEX2_exp[0] = HEX2_expected_prev[0];
	end
	if (
		( HEX2_expected_prev[1] !== 1'bx ) && ( HEX2_prev[1] !== HEX2_expected_prev[1] )
		&& ((HEX2_expected_prev[1] !== last_HEX2_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX2_expected_prev);
		$display ("     Real value = %b", HEX2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_HEX2_exp[1] = HEX2_expected_prev[1];
	end
	if (
		( HEX2_expected_prev[2] !== 1'bx ) && ( HEX2_prev[2] !== HEX2_expected_prev[2] )
		&& ((HEX2_expected_prev[2] !== last_HEX2_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX2_expected_prev);
		$display ("     Real value = %b", HEX2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_HEX2_exp[2] = HEX2_expected_prev[2];
	end
	if (
		( HEX2_expected_prev[3] !== 1'bx ) && ( HEX2_prev[3] !== HEX2_expected_prev[3] )
		&& ((HEX2_expected_prev[3] !== last_HEX2_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX2_expected_prev);
		$display ("     Real value = %b", HEX2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_HEX2_exp[3] = HEX2_expected_prev[3];
	end
	if (
		( HEX2_expected_prev[4] !== 1'bx ) && ( HEX2_prev[4] !== HEX2_expected_prev[4] )
		&& ((HEX2_expected_prev[4] !== last_HEX2_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX2_expected_prev);
		$display ("     Real value = %b", HEX2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_HEX2_exp[4] = HEX2_expected_prev[4];
	end
	if (
		( HEX2_expected_prev[5] !== 1'bx ) && ( HEX2_prev[5] !== HEX2_expected_prev[5] )
		&& ((HEX2_expected_prev[5] !== last_HEX2_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX2_expected_prev);
		$display ("     Real value = %b", HEX2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_HEX2_exp[5] = HEX2_expected_prev[5];
	end
	if (
		( HEX2_expected_prev[6] !== 1'bx ) && ( HEX2_prev[6] !== HEX2_expected_prev[6] )
		&& ((HEX2_expected_prev[6] !== last_HEX2_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX2_expected_prev);
		$display ("     Real value = %b", HEX2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_HEX2_exp[6] = HEX2_expected_prev[6];
	end
	if (
		( HEX3_expected_prev[0] !== 1'bx ) && ( HEX3_prev[0] !== HEX3_expected_prev[0] )
		&& ((HEX3_expected_prev[0] !== last_HEX3_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX3_expected_prev);
		$display ("     Real value = %b", HEX3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_HEX3_exp[0] = HEX3_expected_prev[0];
	end
	if (
		( HEX3_expected_prev[1] !== 1'bx ) && ( HEX3_prev[1] !== HEX3_expected_prev[1] )
		&& ((HEX3_expected_prev[1] !== last_HEX3_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX3_expected_prev);
		$display ("     Real value = %b", HEX3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_HEX3_exp[1] = HEX3_expected_prev[1];
	end
	if (
		( HEX3_expected_prev[2] !== 1'bx ) && ( HEX3_prev[2] !== HEX3_expected_prev[2] )
		&& ((HEX3_expected_prev[2] !== last_HEX3_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX3_expected_prev);
		$display ("     Real value = %b", HEX3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_HEX3_exp[2] = HEX3_expected_prev[2];
	end
	if (
		( HEX3_expected_prev[3] !== 1'bx ) && ( HEX3_prev[3] !== HEX3_expected_prev[3] )
		&& ((HEX3_expected_prev[3] !== last_HEX3_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX3_expected_prev);
		$display ("     Real value = %b", HEX3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_HEX3_exp[3] = HEX3_expected_prev[3];
	end
	if (
		( HEX3_expected_prev[4] !== 1'bx ) && ( HEX3_prev[4] !== HEX3_expected_prev[4] )
		&& ((HEX3_expected_prev[4] !== last_HEX3_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX3_expected_prev);
		$display ("     Real value = %b", HEX3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_HEX3_exp[4] = HEX3_expected_prev[4];
	end
	if (
		( HEX3_expected_prev[5] !== 1'bx ) && ( HEX3_prev[5] !== HEX3_expected_prev[5] )
		&& ((HEX3_expected_prev[5] !== last_HEX3_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX3_expected_prev);
		$display ("     Real value = %b", HEX3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_HEX3_exp[5] = HEX3_expected_prev[5];
	end
	if (
		( HEX3_expected_prev[6] !== 1'bx ) && ( HEX3_prev[6] !== HEX3_expected_prev[6] )
		&& ((HEX3_expected_prev[6] !== last_HEX3_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX3_expected_prev);
		$display ("     Real value = %b", HEX3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_HEX3_exp[6] = HEX3_expected_prev[6];
	end
	if (
		( HEX4_expected_prev[0] !== 1'bx ) && ( HEX4_prev[0] !== HEX4_expected_prev[0] )
		&& ((HEX4_expected_prev[0] !== last_HEX4_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX4_expected_prev);
		$display ("     Real value = %b", HEX4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_HEX4_exp[0] = HEX4_expected_prev[0];
	end
	if (
		( HEX4_expected_prev[1] !== 1'bx ) && ( HEX4_prev[1] !== HEX4_expected_prev[1] )
		&& ((HEX4_expected_prev[1] !== last_HEX4_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX4_expected_prev);
		$display ("     Real value = %b", HEX4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_HEX4_exp[1] = HEX4_expected_prev[1];
	end
	if (
		( HEX4_expected_prev[2] !== 1'bx ) && ( HEX4_prev[2] !== HEX4_expected_prev[2] )
		&& ((HEX4_expected_prev[2] !== last_HEX4_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX4_expected_prev);
		$display ("     Real value = %b", HEX4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_HEX4_exp[2] = HEX4_expected_prev[2];
	end
	if (
		( HEX4_expected_prev[3] !== 1'bx ) && ( HEX4_prev[3] !== HEX4_expected_prev[3] )
		&& ((HEX4_expected_prev[3] !== last_HEX4_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX4_expected_prev);
		$display ("     Real value = %b", HEX4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_HEX4_exp[3] = HEX4_expected_prev[3];
	end
	if (
		( HEX4_expected_prev[4] !== 1'bx ) && ( HEX4_prev[4] !== HEX4_expected_prev[4] )
		&& ((HEX4_expected_prev[4] !== last_HEX4_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX4[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX4_expected_prev);
		$display ("     Real value = %b", HEX4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_HEX4_exp[4] = HEX4_expected_prev[4];
	end
	if (
		( HEX4_expected_prev[5] !== 1'bx ) && ( HEX4_prev[5] !== HEX4_expected_prev[5] )
		&& ((HEX4_expected_prev[5] !== last_HEX4_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX4[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX4_expected_prev);
		$display ("     Real value = %b", HEX4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_HEX4_exp[5] = HEX4_expected_prev[5];
	end
	if (
		( HEX4_expected_prev[6] !== 1'bx ) && ( HEX4_prev[6] !== HEX4_expected_prev[6] )
		&& ((HEX4_expected_prev[6] !== last_HEX4_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX4[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX4_expected_prev);
		$display ("     Real value = %b", HEX4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_HEX4_exp[6] = HEX4_expected_prev[6];
	end
	if (
		( HEX5_expected_prev[0] !== 1'bx ) && ( HEX5_prev[0] !== HEX5_expected_prev[0] )
		&& ((HEX5_expected_prev[0] !== last_HEX5_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX5[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX5_expected_prev);
		$display ("     Real value = %b", HEX5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_HEX5_exp[0] = HEX5_expected_prev[0];
	end
	if (
		( HEX5_expected_prev[1] !== 1'bx ) && ( HEX5_prev[1] !== HEX5_expected_prev[1] )
		&& ((HEX5_expected_prev[1] !== last_HEX5_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX5[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX5_expected_prev);
		$display ("     Real value = %b", HEX5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_HEX5_exp[1] = HEX5_expected_prev[1];
	end
	if (
		( HEX5_expected_prev[2] !== 1'bx ) && ( HEX5_prev[2] !== HEX5_expected_prev[2] )
		&& ((HEX5_expected_prev[2] !== last_HEX5_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX5[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX5_expected_prev);
		$display ("     Real value = %b", HEX5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_HEX5_exp[2] = HEX5_expected_prev[2];
	end
	if (
		( HEX5_expected_prev[3] !== 1'bx ) && ( HEX5_prev[3] !== HEX5_expected_prev[3] )
		&& ((HEX5_expected_prev[3] !== last_HEX5_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX5[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX5_expected_prev);
		$display ("     Real value = %b", HEX5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_HEX5_exp[3] = HEX5_expected_prev[3];
	end
	if (
		( HEX5_expected_prev[4] !== 1'bx ) && ( HEX5_prev[4] !== HEX5_expected_prev[4] )
		&& ((HEX5_expected_prev[4] !== last_HEX5_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX5[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX5_expected_prev);
		$display ("     Real value = %b", HEX5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_HEX5_exp[4] = HEX5_expected_prev[4];
	end
	if (
		( HEX5_expected_prev[5] !== 1'bx ) && ( HEX5_prev[5] !== HEX5_expected_prev[5] )
		&& ((HEX5_expected_prev[5] !== last_HEX5_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX5[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX5_expected_prev);
		$display ("     Real value = %b", HEX5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_HEX5_exp[5] = HEX5_expected_prev[5];
	end
	if (
		( HEX5_expected_prev[6] !== 1'bx ) && ( HEX5_prev[6] !== HEX5_expected_prev[6] )
		&& ((HEX5_expected_prev[6] !== last_HEX5_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX5[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX5_expected_prev);
		$display ("     Real value = %b", HEX5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_HEX5_exp[6] = HEX5_expected_prev[6];
	end
	if (
		( HEX6_expected_prev[0] !== 1'bx ) && ( HEX6_prev[0] !== HEX6_expected_prev[0] )
		&& ((HEX6_expected_prev[0] !== last_HEX6_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX6[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX6_expected_prev);
		$display ("     Real value = %b", HEX6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_HEX6_exp[0] = HEX6_expected_prev[0];
	end
	if (
		( HEX6_expected_prev[1] !== 1'bx ) && ( HEX6_prev[1] !== HEX6_expected_prev[1] )
		&& ((HEX6_expected_prev[1] !== last_HEX6_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX6[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX6_expected_prev);
		$display ("     Real value = %b", HEX6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_HEX6_exp[1] = HEX6_expected_prev[1];
	end
	if (
		( HEX6_expected_prev[2] !== 1'bx ) && ( HEX6_prev[2] !== HEX6_expected_prev[2] )
		&& ((HEX6_expected_prev[2] !== last_HEX6_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX6[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX6_expected_prev);
		$display ("     Real value = %b", HEX6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_HEX6_exp[2] = HEX6_expected_prev[2];
	end
	if (
		( HEX6_expected_prev[3] !== 1'bx ) && ( HEX6_prev[3] !== HEX6_expected_prev[3] )
		&& ((HEX6_expected_prev[3] !== last_HEX6_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX6[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX6_expected_prev);
		$display ("     Real value = %b", HEX6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_HEX6_exp[3] = HEX6_expected_prev[3];
	end
	if (
		( HEX6_expected_prev[4] !== 1'bx ) && ( HEX6_prev[4] !== HEX6_expected_prev[4] )
		&& ((HEX6_expected_prev[4] !== last_HEX6_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX6[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX6_expected_prev);
		$display ("     Real value = %b", HEX6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_HEX6_exp[4] = HEX6_expected_prev[4];
	end
	if (
		( HEX6_expected_prev[5] !== 1'bx ) && ( HEX6_prev[5] !== HEX6_expected_prev[5] )
		&& ((HEX6_expected_prev[5] !== last_HEX6_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX6[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX6_expected_prev);
		$display ("     Real value = %b", HEX6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_HEX6_exp[5] = HEX6_expected_prev[5];
	end
	if (
		( HEX6_expected_prev[6] !== 1'bx ) && ( HEX6_prev[6] !== HEX6_expected_prev[6] )
		&& ((HEX6_expected_prev[6] !== last_HEX6_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX6[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX6_expected_prev);
		$display ("     Real value = %b", HEX6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_HEX6_exp[6] = HEX6_expected_prev[6];
	end
	if (
		( HEX7_expected_prev[0] !== 1'bx ) && ( HEX7_prev[0] !== HEX7_expected_prev[0] )
		&& ((HEX7_expected_prev[0] !== last_HEX7_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX7[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX7_expected_prev);
		$display ("     Real value = %b", HEX7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_HEX7_exp[0] = HEX7_expected_prev[0];
	end
	if (
		( HEX7_expected_prev[1] !== 1'bx ) && ( HEX7_prev[1] !== HEX7_expected_prev[1] )
		&& ((HEX7_expected_prev[1] !== last_HEX7_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX7[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX7_expected_prev);
		$display ("     Real value = %b", HEX7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_HEX7_exp[1] = HEX7_expected_prev[1];
	end
	if (
		( HEX7_expected_prev[2] !== 1'bx ) && ( HEX7_prev[2] !== HEX7_expected_prev[2] )
		&& ((HEX7_expected_prev[2] !== last_HEX7_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX7[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX7_expected_prev);
		$display ("     Real value = %b", HEX7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_HEX7_exp[2] = HEX7_expected_prev[2];
	end
	if (
		( HEX7_expected_prev[3] !== 1'bx ) && ( HEX7_prev[3] !== HEX7_expected_prev[3] )
		&& ((HEX7_expected_prev[3] !== last_HEX7_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX7[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX7_expected_prev);
		$display ("     Real value = %b", HEX7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_HEX7_exp[3] = HEX7_expected_prev[3];
	end
	if (
		( HEX7_expected_prev[4] !== 1'bx ) && ( HEX7_prev[4] !== HEX7_expected_prev[4] )
		&& ((HEX7_expected_prev[4] !== last_HEX7_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX7[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX7_expected_prev);
		$display ("     Real value = %b", HEX7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_HEX7_exp[4] = HEX7_expected_prev[4];
	end
	if (
		( HEX7_expected_prev[5] !== 1'bx ) && ( HEX7_prev[5] !== HEX7_expected_prev[5] )
		&& ((HEX7_expected_prev[5] !== last_HEX7_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX7[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX7_expected_prev);
		$display ("     Real value = %b", HEX7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_HEX7_exp[5] = HEX7_expected_prev[5];
	end
	if (
		( HEX7_expected_prev[6] !== 1'bx ) && ( HEX7_prev[6] !== HEX7_expected_prev[6] )
		&& ((HEX7_expected_prev[6] !== last_HEX7_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HEX7[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HEX7_expected_prev);
		$display ("     Real value = %b", HEX7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_HEX7_exp[6] = HEX7_expected_prev[6];
	end
	if (
		( LEDG7_0_expected_prev[0] !== 1'bx ) && ( LEDG7_0_prev[0] !== LEDG7_0_expected_prev[0] )
		&& ((LEDG7_0_expected_prev[0] !== last_LEDG7_0_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDG7_0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDG7_0_expected_prev);
		$display ("     Real value = %b", LEDG7_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_LEDG7_0_exp[0] = LEDG7_0_expected_prev[0];
	end
	if (
		( LEDG7_0_expected_prev[1] !== 1'bx ) && ( LEDG7_0_prev[1] !== LEDG7_0_expected_prev[1] )
		&& ((LEDG7_0_expected_prev[1] !== last_LEDG7_0_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDG7_0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDG7_0_expected_prev);
		$display ("     Real value = %b", LEDG7_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_LEDG7_0_exp[1] = LEDG7_0_expected_prev[1];
	end
	if (
		( LEDG7_0_expected_prev[2] !== 1'bx ) && ( LEDG7_0_prev[2] !== LEDG7_0_expected_prev[2] )
		&& ((LEDG7_0_expected_prev[2] !== last_LEDG7_0_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDG7_0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDG7_0_expected_prev);
		$display ("     Real value = %b", LEDG7_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_LEDG7_0_exp[2] = LEDG7_0_expected_prev[2];
	end
	if (
		( LEDG7_0_expected_prev[3] !== 1'bx ) && ( LEDG7_0_prev[3] !== LEDG7_0_expected_prev[3] )
		&& ((LEDG7_0_expected_prev[3] !== last_LEDG7_0_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDG7_0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDG7_0_expected_prev);
		$display ("     Real value = %b", LEDG7_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_LEDG7_0_exp[3] = LEDG7_0_expected_prev[3];
	end
	if (
		( LEDG7_0_expected_prev[4] !== 1'bx ) && ( LEDG7_0_prev[4] !== LEDG7_0_expected_prev[4] )
		&& ((LEDG7_0_expected_prev[4] !== last_LEDG7_0_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDG7_0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDG7_0_expected_prev);
		$display ("     Real value = %b", LEDG7_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_LEDG7_0_exp[4] = LEDG7_0_expected_prev[4];
	end
	if (
		( LEDG7_0_expected_prev[5] !== 1'bx ) && ( LEDG7_0_prev[5] !== LEDG7_0_expected_prev[5] )
		&& ((LEDG7_0_expected_prev[5] !== last_LEDG7_0_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDG7_0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDG7_0_expected_prev);
		$display ("     Real value = %b", LEDG7_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_LEDG7_0_exp[5] = LEDG7_0_expected_prev[5];
	end
	if (
		( LEDG7_0_expected_prev[6] !== 1'bx ) && ( LEDG7_0_prev[6] !== LEDG7_0_expected_prev[6] )
		&& ((LEDG7_0_expected_prev[6] !== last_LEDG7_0_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDG7_0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDG7_0_expected_prev);
		$display ("     Real value = %b", LEDG7_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_LEDG7_0_exp[6] = LEDG7_0_expected_prev[6];
	end
	if (
		( LEDG7_0_expected_prev[7] !== 1'bx ) && ( LEDG7_0_prev[7] !== LEDG7_0_expected_prev[7] )
		&& ((LEDG7_0_expected_prev[7] !== last_LEDG7_0_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDG7_0[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDG7_0_expected_prev);
		$display ("     Real value = %b", LEDG7_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_LEDG7_0_exp[7] = LEDG7_0_expected_prev[7];
	end
	if (
		( LEDR7_0_expected_prev[0] !== 1'bx ) && ( LEDR7_0_prev[0] !== LEDR7_0_expected_prev[0] )
		&& ((LEDR7_0_expected_prev[0] !== last_LEDR7_0_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR7_0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR7_0_expected_prev);
		$display ("     Real value = %b", LEDR7_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_LEDR7_0_exp[0] = LEDR7_0_expected_prev[0];
	end
	if (
		( LEDR7_0_expected_prev[1] !== 1'bx ) && ( LEDR7_0_prev[1] !== LEDR7_0_expected_prev[1] )
		&& ((LEDR7_0_expected_prev[1] !== last_LEDR7_0_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR7_0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR7_0_expected_prev);
		$display ("     Real value = %b", LEDR7_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_LEDR7_0_exp[1] = LEDR7_0_expected_prev[1];
	end
	if (
		( LEDR7_0_expected_prev[2] !== 1'bx ) && ( LEDR7_0_prev[2] !== LEDR7_0_expected_prev[2] )
		&& ((LEDR7_0_expected_prev[2] !== last_LEDR7_0_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR7_0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR7_0_expected_prev);
		$display ("     Real value = %b", LEDR7_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_LEDR7_0_exp[2] = LEDR7_0_expected_prev[2];
	end
	if (
		( LEDR7_0_expected_prev[3] !== 1'bx ) && ( LEDR7_0_prev[3] !== LEDR7_0_expected_prev[3] )
		&& ((LEDR7_0_expected_prev[3] !== last_LEDR7_0_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR7_0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR7_0_expected_prev);
		$display ("     Real value = %b", LEDR7_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_LEDR7_0_exp[3] = LEDR7_0_expected_prev[3];
	end
	if (
		( LEDR7_0_expected_prev[4] !== 1'bx ) && ( LEDR7_0_prev[4] !== LEDR7_0_expected_prev[4] )
		&& ((LEDR7_0_expected_prev[4] !== last_LEDR7_0_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR7_0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR7_0_expected_prev);
		$display ("     Real value = %b", LEDR7_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_LEDR7_0_exp[4] = LEDR7_0_expected_prev[4];
	end
	if (
		( LEDR7_0_expected_prev[5] !== 1'bx ) && ( LEDR7_0_prev[5] !== LEDR7_0_expected_prev[5] )
		&& ((LEDR7_0_expected_prev[5] !== last_LEDR7_0_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR7_0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR7_0_expected_prev);
		$display ("     Real value = %b", LEDR7_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_LEDR7_0_exp[5] = LEDR7_0_expected_prev[5];
	end
	if (
		( LEDR7_0_expected_prev[6] !== 1'bx ) && ( LEDR7_0_prev[6] !== LEDR7_0_expected_prev[6] )
		&& ((LEDR7_0_expected_prev[6] !== last_LEDR7_0_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR7_0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR7_0_expected_prev);
		$display ("     Real value = %b", LEDR7_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_LEDR7_0_exp[6] = LEDR7_0_expected_prev[6];
	end
	if (
		( LEDR7_0_expected_prev[7] !== 1'bx ) && ( LEDR7_0_prev[7] !== LEDR7_0_expected_prev[7] )
		&& ((LEDR7_0_expected_prev[7] !== last_LEDR7_0_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR7_0[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR7_0_expected_prev);
		$display ("     Real value = %b", LEDR7_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_LEDR7_0_exp[7] = LEDR7_0_expected_prev[7];
	end
	if (
		( LEDR15_8_expected_prev[0] !== 1'bx ) && ( LEDR15_8_prev[0] !== LEDR15_8_expected_prev[0] )
		&& ((LEDR15_8_expected_prev[0] !== last_LEDR15_8_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR15_8[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR15_8_expected_prev);
		$display ("     Real value = %b", LEDR15_8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_LEDR15_8_exp[0] = LEDR15_8_expected_prev[0];
	end
	if (
		( LEDR15_8_expected_prev[1] !== 1'bx ) && ( LEDR15_8_prev[1] !== LEDR15_8_expected_prev[1] )
		&& ((LEDR15_8_expected_prev[1] !== last_LEDR15_8_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR15_8[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR15_8_expected_prev);
		$display ("     Real value = %b", LEDR15_8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_LEDR15_8_exp[1] = LEDR15_8_expected_prev[1];
	end
	if (
		( LEDR15_8_expected_prev[2] !== 1'bx ) && ( LEDR15_8_prev[2] !== LEDR15_8_expected_prev[2] )
		&& ((LEDR15_8_expected_prev[2] !== last_LEDR15_8_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR15_8[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR15_8_expected_prev);
		$display ("     Real value = %b", LEDR15_8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_LEDR15_8_exp[2] = LEDR15_8_expected_prev[2];
	end
	if (
		( LEDR15_8_expected_prev[3] !== 1'bx ) && ( LEDR15_8_prev[3] !== LEDR15_8_expected_prev[3] )
		&& ((LEDR15_8_expected_prev[3] !== last_LEDR15_8_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR15_8[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR15_8_expected_prev);
		$display ("     Real value = %b", LEDR15_8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_LEDR15_8_exp[3] = LEDR15_8_expected_prev[3];
	end
	if (
		( LEDR15_8_expected_prev[4] !== 1'bx ) && ( LEDR15_8_prev[4] !== LEDR15_8_expected_prev[4] )
		&& ((LEDR15_8_expected_prev[4] !== last_LEDR15_8_exp[4]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR15_8[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR15_8_expected_prev);
		$display ("     Real value = %b", LEDR15_8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_LEDR15_8_exp[4] = LEDR15_8_expected_prev[4];
	end
	if (
		( LEDR15_8_expected_prev[5] !== 1'bx ) && ( LEDR15_8_prev[5] !== LEDR15_8_expected_prev[5] )
		&& ((LEDR15_8_expected_prev[5] !== last_LEDR15_8_exp[5]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR15_8[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR15_8_expected_prev);
		$display ("     Real value = %b", LEDR15_8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_LEDR15_8_exp[5] = LEDR15_8_expected_prev[5];
	end
	if (
		( LEDR15_8_expected_prev[6] !== 1'bx ) && ( LEDR15_8_prev[6] !== LEDR15_8_expected_prev[6] )
		&& ((LEDR15_8_expected_prev[6] !== last_LEDR15_8_exp[6]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR15_8[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR15_8_expected_prev);
		$display ("     Real value = %b", LEDR15_8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_LEDR15_8_exp[6] = LEDR15_8_expected_prev[6];
	end
	if (
		( LEDR15_8_expected_prev[7] !== 1'bx ) && ( LEDR15_8_prev[7] !== LEDR15_8_expected_prev[7] )
		&& ((LEDR15_8_expected_prev[7] !== last_LEDR15_8_exp[7]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR15_8[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR15_8_expected_prev);
		$display ("     Real value = %b", LEDR15_8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_LEDR15_8_exp[7] = LEDR15_8_expected_prev[7];
	end
	if (
		( LEDR17_expected_prev !== 1'bx ) && ( LEDR17_prev !== LEDR17_expected_prev )
		&& ((LEDR17_expected_prev !== last_LEDR17_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR17 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR17_expected_prev);
		$display ("     Real value = %b", LEDR17_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_LEDR17_exp = LEDR17_expected_prev;
	end
	if (
		( opcode_expected_prev[0] !== 1'bx ) && ( opcode_prev[0] !== opcode_expected_prev[0] )
		&& ((opcode_expected_prev[0] !== last_opcode_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_opcode_exp[0] = opcode_expected_prev[0];
	end
	if (
		( opcode_expected_prev[1] !== 1'bx ) && ( opcode_prev[1] !== opcode_expected_prev[1] )
		&& ((opcode_expected_prev[1] !== last_opcode_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_opcode_exp[1] = opcode_expected_prev[1];
	end
	if (
		( opcode_expected_prev[2] !== 1'bx ) && ( opcode_prev[2] !== opcode_expected_prev[2] )
		&& ((opcode_expected_prev[2] !== last_opcode_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_opcode_exp[2] = opcode_expected_prev[2];
	end
	if (
		( opcode_expected_prev[3] !== 1'bx ) && ( opcode_prev[3] !== opcode_expected_prev[3] )
		&& ((opcode_expected_prev[3] !== last_opcode_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_opcode_exp[3] = opcode_expected_prev[3];
	end
	if (
		( opcode_expected_prev[4] !== 1'bx ) && ( opcode_prev[4] !== opcode_expected_prev[4] )
		&& ((opcode_expected_prev[4] !== last_opcode_exp[4]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_opcode_exp[4] = opcode_expected_prev[4];
	end
	if (
		( opcode_expected_prev[5] !== 1'bx ) && ( opcode_prev[5] !== opcode_expected_prev[5] )
		&& ((opcode_expected_prev[5] !== last_opcode_exp[5]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_opcode_exp[5] = opcode_expected_prev[5];
	end
	if (
		( opcode_expected_prev[6] !== 1'bx ) && ( opcode_prev[6] !== opcode_expected_prev[6] )
		&& ((opcode_expected_prev[6] !== last_opcode_exp[6]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_opcode_exp[6] = opcode_expected_prev[6];
	end
	if (
		( opcode_expected_prev[7] !== 1'bx ) && ( opcode_prev[7] !== opcode_expected_prev[7] )
		&& ((opcode_expected_prev[7] !== last_opcode_exp[7]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_expected_prev);
		$display ("     Real value = %b", opcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_opcode_exp[7] = opcode_expected_prev[7];
	end
	if (
		( ram_out_expected_prev[0] !== 1'bx ) && ( ram_out_prev[0] !== ram_out_expected_prev[0] )
		&& ((ram_out_expected_prev[0] !== last_ram_out_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ram_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ram_out_expected_prev);
		$display ("     Real value = %b", ram_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ram_out_exp[0] = ram_out_expected_prev[0];
	end
	if (
		( ram_out_expected_prev[1] !== 1'bx ) && ( ram_out_prev[1] !== ram_out_expected_prev[1] )
		&& ((ram_out_expected_prev[1] !== last_ram_out_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ram_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ram_out_expected_prev);
		$display ("     Real value = %b", ram_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ram_out_exp[1] = ram_out_expected_prev[1];
	end
	if (
		( ram_out_expected_prev[2] !== 1'bx ) && ( ram_out_prev[2] !== ram_out_expected_prev[2] )
		&& ((ram_out_expected_prev[2] !== last_ram_out_exp[2]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ram_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ram_out_expected_prev);
		$display ("     Real value = %b", ram_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ram_out_exp[2] = ram_out_expected_prev[2];
	end
	if (
		( ram_out_expected_prev[3] !== 1'bx ) && ( ram_out_prev[3] !== ram_out_expected_prev[3] )
		&& ((ram_out_expected_prev[3] !== last_ram_out_exp[3]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ram_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ram_out_expected_prev);
		$display ("     Real value = %b", ram_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ram_out_exp[3] = ram_out_expected_prev[3];
	end
	if (
		( ram_out_expected_prev[4] !== 1'bx ) && ( ram_out_prev[4] !== ram_out_expected_prev[4] )
		&& ((ram_out_expected_prev[4] !== last_ram_out_exp[4]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ram_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ram_out_expected_prev);
		$display ("     Real value = %b", ram_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ram_out_exp[4] = ram_out_expected_prev[4];
	end
	if (
		( ram_out_expected_prev[5] !== 1'bx ) && ( ram_out_prev[5] !== ram_out_expected_prev[5] )
		&& ((ram_out_expected_prev[5] !== last_ram_out_exp[5]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ram_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ram_out_expected_prev);
		$display ("     Real value = %b", ram_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ram_out_exp[5] = ram_out_expected_prev[5];
	end
	if (
		( ram_out_expected_prev[6] !== 1'bx ) && ( ram_out_prev[6] !== ram_out_expected_prev[6] )
		&& ((ram_out_expected_prev[6] !== last_ram_out_exp[6]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ram_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ram_out_expected_prev);
		$display ("     Real value = %b", ram_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ram_out_exp[6] = ram_out_expected_prev[6];
	end
	if (
		( ram_out_expected_prev[7] !== 1'bx ) && ( ram_out_prev[7] !== ram_out_expected_prev[7] )
		&& ((ram_out_expected_prev[7] !== last_ram_out_exp[7]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ram_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ram_out_expected_prev);
		$display ("     Real value = %b", ram_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ram_out_exp[7] = ram_out_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module processador_perifericos_timer_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk27;
reg [3:0] KEY3_0;
reg [7:0] SW7_0;
reg [7:0] SW15_8;
// wires                                               
wire [6:0] HEX0;
wire [6:0] HEX1;
wire [6:0] HEX2;
wire [6:0] HEX3;
wire [6:0] HEX4;
wire [6:0] HEX5;
wire [6:0] HEX6;
wire [6:0] HEX7;
wire [7:0] LEDG7_0;
wire [7:0] LEDR7_0;
wire [7:0] LEDR15_8;
wire LEDR17;
wire [7:0] opcode;
wire [7:0] ram_out;

wire sampler;                             

// assign statements (if any)                          
processador_perifericos_timer i1 (
// port map - connection between master ports and signals/registers   
	.clk27(clk27),
	.HEX0(HEX0),
	.HEX1(HEX1),
	.HEX2(HEX2),
	.HEX3(HEX3),
	.HEX4(HEX4),
	.HEX5(HEX5),
	.HEX6(HEX6),
	.HEX7(HEX7),
	.KEY3_0(KEY3_0),
	.LEDG7_0(LEDG7_0),
	.LEDR7_0(LEDR7_0),
	.LEDR15_8(LEDR15_8),
	.LEDR17(LEDR17),
	.opcode(opcode),
	.ram_out(ram_out),
	.SW7_0(SW7_0),
	.SW15_8(SW15_8)
);

// clk27
always
begin
	clk27 = 1'b0;
	clk27 = #25 1'b1;
	#25;
end 
// SW7_0[ 7 ]
initial
begin
	SW7_0[7] = 1'b0;
end 
// SW7_0[ 6 ]
initial
begin
	SW7_0[6] = 1'b0;
end 
// SW7_0[ 5 ]
initial
begin
	SW7_0[5] = 1'b0;
end 
// SW7_0[ 4 ]
initial
begin
	SW7_0[4] = 1'b1;
end 
// SW7_0[ 3 ]
initial
begin
	SW7_0[3] = 1'b0;
end 
// SW7_0[ 2 ]
initial
begin
	SW7_0[2] = 1'b1;
end 
// SW7_0[ 1 ]
initial
begin
	SW7_0[1] = 1'b0;
end 
// SW7_0[ 0 ]
initial
begin
	SW7_0[0] = 1'b0;
end 
// SW15_8[ 7 ]
initial
begin
	SW15_8[7] = 1'b0;
end 
// SW15_8[ 6 ]
initial
begin
	SW15_8[6] = 1'b0;
end 
// SW15_8[ 5 ]
initial
begin
	SW15_8[5] = 1'b0;
end 
// SW15_8[ 4 ]
initial
begin
	SW15_8[4] = 1'b0;
end 
// SW15_8[ 3 ]
initial
begin
	SW15_8[3] = 1'b0;
end 
// SW15_8[ 2 ]
initial
begin
	SW15_8[2] = 1'b0;
end 
// SW15_8[ 1 ]
initial
begin
	SW15_8[1] = 1'b1;
end 
// SW15_8[ 0 ]
initial
begin
	SW15_8[0] = 1'b1;
end 
// KEY3_0[ 3 ]
initial
begin
	KEY3_0[3] = 1'b0;
end 
// KEY3_0[ 2 ]
initial
begin
	KEY3_0[2] = 1'b0;
end 
// KEY3_0[ 1 ]
initial
begin
	KEY3_0[1] = 1'b0;
end 
// KEY3_0[ 0 ]
initial
begin
	KEY3_0[0] = 1'b0;
end 

processador_perifericos_timer_vlg_sample_tst tb_sample (
	.clk27(clk27),
	.KEY3_0(KEY3_0),
	.SW7_0(SW7_0),
	.SW15_8(SW15_8),
	.sampler_tx(sampler)
);

processador_perifericos_timer_vlg_check_tst tb_out(
	.HEX0(HEX0),
	.HEX1(HEX1),
	.HEX2(HEX2),
	.HEX3(HEX3),
	.HEX4(HEX4),
	.HEX5(HEX5),
	.HEX6(HEX6),
	.HEX7(HEX7),
	.LEDG7_0(LEDG7_0),
	.LEDR7_0(LEDR7_0),
	.LEDR15_8(LEDR15_8),
	.LEDR17(LEDR17),
	.opcode(opcode),
	.ram_out(ram_out),
	.sampler_rx(sampler)
);
endmodule

