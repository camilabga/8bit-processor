library ieee;
use ieee.std_logic_1164.all;

entity SPI_SD is 
    port(clk, DAT: in std_logic;
         MOSI: in std_logic_vector(7 downto 0);
         MISO: out std_logic_vector(7 downto 0);
         DAT3, CMD: out std_logic);
end SPI_SD;

architecture main_SPI of SPI_SD is
    component Registrador8Bits is
        port(clock,ld,Preset,Clear	: in std_logic;
                D: in std_logic_vector(7 downto 0);
                Q:out std_logic_vector(7 downto 0));
    end component;

    component or_8bits is
        port(a,b	:in  std_logic_vector(7 downto 0);
            s	:out std_logic_vector(7 downto 0));
    end component;

    component shl_8bits is
        port(i,shift	:in  std_logic_vector(7 downto 0);
            s			:out std_logic_vector(7 downto 0);
            carry		:out std_logic);
    end component;

    signal n_clk: std_logic;
    signal out_reg0, out_shl0, in_reg0, out_reg1, out_shl1, in_reg1: std_logic_vector(7 downto 0);

begin

    n_clk <= clk;

    SHLLLLLL0: shl_8bits port map(out_reg0, "00000001", out_shl0, open);

    ORRRRRR0: or_8bits port map(out_shl0, "0000000"&DAT, in_reg0);

    REG_IN000: Registrador8Bits port map(n_clk, '1', '1', '1', in_reg0, out_reg0);

    SHLLLLLL1: shl_8bits port map(out_reg1, "00000001", out_shl1, open);

    REG_OUT000: Registrador8Bits port map(n_clk, '1', '1', '1', in_reg1, out_reg1);

    MISO <= out_reg0;

end main_SPI;