// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/19/2018 09:55:09"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    lab06
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab06_vlg_sample_tst(
	clk_27,
	sw,
	sw17,
	sampler_tx
);
input  clk_27;
input [7:0] sw;
input  sw17;
output sampler_tx;

reg sample;
time current_time;
always @(clk_27 or sw or sw17)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module lab06_vlg_check_tst (
	hex0,
	hex1,
	hex2,
	hex3,
	ir_ex,
	opcode_ex,
	out_display_ex,
	pc_out_ex,
	ram_out_exibir,
	sampler_rx
);
input [6:0] hex0;
input [6:0] hex1;
input [6:0] hex2;
input [6:0] hex3;
input [15:0] ir_ex;
input [3:0] opcode_ex;
input [15:0] out_display_ex;
input [7:0] pc_out_ex;
input [15:0] ram_out_exibir;
input sampler_rx;

reg [6:0] hex0_expected;
reg [6:0] hex1_expected;
reg [6:0] hex2_expected;
reg [6:0] hex3_expected;
reg [15:0] ir_ex_expected;
reg [3:0] opcode_ex_expected;
reg [15:0] out_display_ex_expected;
reg [7:0] pc_out_ex_expected;
reg [15:0] ram_out_exibir_expected;

reg [6:0] hex0_prev;
reg [6:0] hex1_prev;
reg [6:0] hex2_prev;
reg [6:0] hex3_prev;
reg [15:0] ir_ex_prev;
reg [3:0] opcode_ex_prev;
reg [15:0] out_display_ex_prev;
reg [7:0] pc_out_ex_prev;
reg [15:0] ram_out_exibir_prev;

reg [15:0] ir_ex_expected_prev;
reg [3:0] opcode_ex_expected_prev;
reg [15:0] out_display_ex_expected_prev;
reg [7:0] pc_out_ex_expected_prev;
reg [15:0] ram_out_exibir_expected_prev;

reg [15:0] last_ir_ex_exp;
reg [3:0] last_opcode_ex_exp;
reg [15:0] last_out_display_ex_exp;
reg [7:0] last_pc_out_ex_exp;
reg [15:0] last_ram_out_exibir_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:9] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 9'b1;
end

// update real /o prevs

always @(trigger)
begin
	hex0_prev = hex0;
	hex1_prev = hex1;
	hex2_prev = hex2;
	hex3_prev = hex3;
	ir_ex_prev = ir_ex;
	opcode_ex_prev = opcode_ex;
	out_display_ex_prev = out_display_ex;
	pc_out_ex_prev = pc_out_ex;
	ram_out_exibir_prev = ram_out_exibir;
end

// update expected /o prevs

always @(trigger)
begin
	ir_ex_expected_prev = ir_ex_expected;
	opcode_ex_expected_prev = opcode_ex_expected;
	out_display_ex_expected_prev = out_display_ex_expected;
	pc_out_ex_expected_prev = pc_out_ex_expected;
	ram_out_exibir_expected_prev = ram_out_exibir_expected;
end


// expected ram_out_exibir[ 15 ]
initial
begin
	ram_out_exibir_expected[15] = 1'bX;
end 
// expected ram_out_exibir[ 14 ]
initial
begin
	ram_out_exibir_expected[14] = 1'bX;
end 
// expected ram_out_exibir[ 13 ]
initial
begin
	ram_out_exibir_expected[13] = 1'bX;
end 
// expected ram_out_exibir[ 12 ]
initial
begin
	ram_out_exibir_expected[12] = 1'bX;
end 
// expected ram_out_exibir[ 11 ]
initial
begin
	ram_out_exibir_expected[11] = 1'bX;
end 
// expected ram_out_exibir[ 10 ]
initial
begin
	ram_out_exibir_expected[10] = 1'bX;
end 
// expected ram_out_exibir[ 9 ]
initial
begin
	ram_out_exibir_expected[9] = 1'bX;
end 
// expected ram_out_exibir[ 8 ]
initial
begin
	ram_out_exibir_expected[8] = 1'bX;
end 
// expected ram_out_exibir[ 7 ]
initial
begin
	ram_out_exibir_expected[7] = 1'bX;
end 
// expected ram_out_exibir[ 6 ]
initial
begin
	ram_out_exibir_expected[6] = 1'bX;
end 
// expected ram_out_exibir[ 5 ]
initial
begin
	ram_out_exibir_expected[5] = 1'bX;
end 
// expected ram_out_exibir[ 4 ]
initial
begin
	ram_out_exibir_expected[4] = 1'bX;
end 
// expected ram_out_exibir[ 3 ]
initial
begin
	ram_out_exibir_expected[3] = 1'bX;
end 
// expected ram_out_exibir[ 2 ]
initial
begin
	ram_out_exibir_expected[2] = 1'bX;
end 
// expected ram_out_exibir[ 1 ]
initial
begin
	ram_out_exibir_expected[1] = 1'bX;
end 
// expected ram_out_exibir[ 0 ]
initial
begin
	ram_out_exibir_expected[0] = 1'bX;
end 
// expected out_display_ex[ 15 ]
initial
begin
	out_display_ex_expected[15] = 1'bX;
end 
// expected out_display_ex[ 14 ]
initial
begin
	out_display_ex_expected[14] = 1'bX;
end 
// expected out_display_ex[ 13 ]
initial
begin
	out_display_ex_expected[13] = 1'bX;
end 
// expected out_display_ex[ 12 ]
initial
begin
	out_display_ex_expected[12] = 1'bX;
end 
// expected out_display_ex[ 11 ]
initial
begin
	out_display_ex_expected[11] = 1'bX;
end 
// expected out_display_ex[ 10 ]
initial
begin
	out_display_ex_expected[10] = 1'bX;
end 
// expected out_display_ex[ 9 ]
initial
begin
	out_display_ex_expected[9] = 1'bX;
end 
// expected out_display_ex[ 8 ]
initial
begin
	out_display_ex_expected[8] = 1'bX;
end 
// expected out_display_ex[ 7 ]
initial
begin
	out_display_ex_expected[7] = 1'bX;
end 
// expected out_display_ex[ 6 ]
initial
begin
	out_display_ex_expected[6] = 1'bX;
end 
// expected out_display_ex[ 5 ]
initial
begin
	out_display_ex_expected[5] = 1'bX;
end 
// expected out_display_ex[ 4 ]
initial
begin
	out_display_ex_expected[4] = 1'bX;
end 
// expected out_display_ex[ 3 ]
initial
begin
	out_display_ex_expected[3] = 1'bX;
end 
// expected out_display_ex[ 2 ]
initial
begin
	out_display_ex_expected[2] = 1'bX;
end 
// expected out_display_ex[ 1 ]
initial
begin
	out_display_ex_expected[1] = 1'bX;
end 
// expected out_display_ex[ 0 ]
initial
begin
	out_display_ex_expected[0] = 1'bX;
end 
// expected opcode_ex[ 3 ]
initial
begin
	opcode_ex_expected[3] = 1'bX;
end 
// expected opcode_ex[ 2 ]
initial
begin
	opcode_ex_expected[2] = 1'bX;
end 
// expected opcode_ex[ 1 ]
initial
begin
	opcode_ex_expected[1] = 1'bX;
end 
// expected opcode_ex[ 0 ]
initial
begin
	opcode_ex_expected[0] = 1'bX;
end 
// expected ir_ex[ 15 ]
initial
begin
	ir_ex_expected[15] = 1'bX;
end 
// expected ir_ex[ 14 ]
initial
begin
	ir_ex_expected[14] = 1'bX;
end 
// expected ir_ex[ 13 ]
initial
begin
	ir_ex_expected[13] = 1'bX;
end 
// expected ir_ex[ 12 ]
initial
begin
	ir_ex_expected[12] = 1'bX;
end 
// expected ir_ex[ 11 ]
initial
begin
	ir_ex_expected[11] = 1'bX;
end 
// expected ir_ex[ 10 ]
initial
begin
	ir_ex_expected[10] = 1'bX;
end 
// expected ir_ex[ 9 ]
initial
begin
	ir_ex_expected[9] = 1'bX;
end 
// expected ir_ex[ 8 ]
initial
begin
	ir_ex_expected[8] = 1'bX;
end 
// expected ir_ex[ 7 ]
initial
begin
	ir_ex_expected[7] = 1'bX;
end 
// expected ir_ex[ 6 ]
initial
begin
	ir_ex_expected[6] = 1'bX;
end 
// expected ir_ex[ 5 ]
initial
begin
	ir_ex_expected[5] = 1'bX;
end 
// expected ir_ex[ 4 ]
initial
begin
	ir_ex_expected[4] = 1'bX;
end 
// expected ir_ex[ 3 ]
initial
begin
	ir_ex_expected[3] = 1'bX;
end 
// expected ir_ex[ 2 ]
initial
begin
	ir_ex_expected[2] = 1'bX;
end 
// expected ir_ex[ 1 ]
initial
begin
	ir_ex_expected[1] = 1'bX;
end 
// expected ir_ex[ 0 ]
initial
begin
	ir_ex_expected[0] = 1'bX;
end 
// expected pc_out_ex[ 7 ]
initial
begin
	pc_out_ex_expected[7] = 1'bX;
end 
// expected pc_out_ex[ 6 ]
initial
begin
	pc_out_ex_expected[6] = 1'bX;
end 
// expected pc_out_ex[ 5 ]
initial
begin
	pc_out_ex_expected[5] = 1'bX;
end 
// expected pc_out_ex[ 4 ]
initial
begin
	pc_out_ex_expected[4] = 1'bX;
end 
// expected pc_out_ex[ 3 ]
initial
begin
	pc_out_ex_expected[3] = 1'bX;
end 
// expected pc_out_ex[ 2 ]
initial
begin
	pc_out_ex_expected[2] = 1'bX;
end 
// expected pc_out_ex[ 1 ]
initial
begin
	pc_out_ex_expected[1] = 1'bX;
end 
// expected pc_out_ex[ 0 ]
initial
begin
	pc_out_ex_expected[0] = 1'bX;
end 
// generate trigger
always @(hex0_expected or hex0 or hex1_expected or hex1 or hex2_expected or hex2 or hex3_expected or hex3 or ir_ex_expected or ir_ex or opcode_ex_expected or opcode_ex or out_display_ex_expected or out_display_ex or pc_out_ex_expected or pc_out_ex or ram_out_exibir_expected or ram_out_exibir)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected hex0 = %b | expected hex1 = %b | expected hex2 = %b | expected hex3 = %b | expected ir_ex = %b | expected opcode_ex = %b | expected out_display_ex = %b | expected pc_out_ex = %b | expected ram_out_exibir = %b | ",hex0_expected_prev,hex1_expected_prev,hex2_expected_prev,hex3_expected_prev,ir_ex_expected_prev,opcode_ex_expected_prev,out_display_ex_expected_prev,pc_out_ex_expected_prev,ram_out_exibir_expected_prev);
	$display("| real hex0 = %b | real hex1 = %b | real hex2 = %b | real hex3 = %b | real ir_ex = %b | real opcode_ex = %b | real out_display_ex = %b | real pc_out_ex = %b | real ram_out_exibir = %b | ",hex0_prev,hex1_prev,hex2_prev,hex3_prev,ir_ex_prev,opcode_ex_prev,out_display_ex_prev,pc_out_ex_prev,ram_out_exibir_prev);
`endif
	if (
		( ir_ex_expected_prev[0] !== 1'bx ) && ( ir_ex_prev[0] !== ir_ex_expected_prev[0] )
		&& ((ir_ex_expected_prev[0] !== last_ir_ex_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ir_ex[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ir_ex_expected_prev);
		$display ("     Real value = %b", ir_ex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ir_ex_exp[0] = ir_ex_expected_prev[0];
	end
	if (
		( ir_ex_expected_prev[1] !== 1'bx ) && ( ir_ex_prev[1] !== ir_ex_expected_prev[1] )
		&& ((ir_ex_expected_prev[1] !== last_ir_ex_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ir_ex[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ir_ex_expected_prev);
		$display ("     Real value = %b", ir_ex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ir_ex_exp[1] = ir_ex_expected_prev[1];
	end
	if (
		( ir_ex_expected_prev[2] !== 1'bx ) && ( ir_ex_prev[2] !== ir_ex_expected_prev[2] )
		&& ((ir_ex_expected_prev[2] !== last_ir_ex_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ir_ex[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ir_ex_expected_prev);
		$display ("     Real value = %b", ir_ex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ir_ex_exp[2] = ir_ex_expected_prev[2];
	end
	if (
		( ir_ex_expected_prev[3] !== 1'bx ) && ( ir_ex_prev[3] !== ir_ex_expected_prev[3] )
		&& ((ir_ex_expected_prev[3] !== last_ir_ex_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ir_ex[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ir_ex_expected_prev);
		$display ("     Real value = %b", ir_ex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ir_ex_exp[3] = ir_ex_expected_prev[3];
	end
	if (
		( ir_ex_expected_prev[4] !== 1'bx ) && ( ir_ex_prev[4] !== ir_ex_expected_prev[4] )
		&& ((ir_ex_expected_prev[4] !== last_ir_ex_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ir_ex[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ir_ex_expected_prev);
		$display ("     Real value = %b", ir_ex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ir_ex_exp[4] = ir_ex_expected_prev[4];
	end
	if (
		( ir_ex_expected_prev[5] !== 1'bx ) && ( ir_ex_prev[5] !== ir_ex_expected_prev[5] )
		&& ((ir_ex_expected_prev[5] !== last_ir_ex_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ir_ex[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ir_ex_expected_prev);
		$display ("     Real value = %b", ir_ex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ir_ex_exp[5] = ir_ex_expected_prev[5];
	end
	if (
		( ir_ex_expected_prev[6] !== 1'bx ) && ( ir_ex_prev[6] !== ir_ex_expected_prev[6] )
		&& ((ir_ex_expected_prev[6] !== last_ir_ex_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ir_ex[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ir_ex_expected_prev);
		$display ("     Real value = %b", ir_ex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ir_ex_exp[6] = ir_ex_expected_prev[6];
	end
	if (
		( ir_ex_expected_prev[7] !== 1'bx ) && ( ir_ex_prev[7] !== ir_ex_expected_prev[7] )
		&& ((ir_ex_expected_prev[7] !== last_ir_ex_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ir_ex[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ir_ex_expected_prev);
		$display ("     Real value = %b", ir_ex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ir_ex_exp[7] = ir_ex_expected_prev[7];
	end
	if (
		( ir_ex_expected_prev[8] !== 1'bx ) && ( ir_ex_prev[8] !== ir_ex_expected_prev[8] )
		&& ((ir_ex_expected_prev[8] !== last_ir_ex_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ir_ex[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ir_ex_expected_prev);
		$display ("     Real value = %b", ir_ex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ir_ex_exp[8] = ir_ex_expected_prev[8];
	end
	if (
		( ir_ex_expected_prev[9] !== 1'bx ) && ( ir_ex_prev[9] !== ir_ex_expected_prev[9] )
		&& ((ir_ex_expected_prev[9] !== last_ir_ex_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ir_ex[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ir_ex_expected_prev);
		$display ("     Real value = %b", ir_ex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ir_ex_exp[9] = ir_ex_expected_prev[9];
	end
	if (
		( ir_ex_expected_prev[10] !== 1'bx ) && ( ir_ex_prev[10] !== ir_ex_expected_prev[10] )
		&& ((ir_ex_expected_prev[10] !== last_ir_ex_exp[10]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ir_ex[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ir_ex_expected_prev);
		$display ("     Real value = %b", ir_ex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ir_ex_exp[10] = ir_ex_expected_prev[10];
	end
	if (
		( ir_ex_expected_prev[11] !== 1'bx ) && ( ir_ex_prev[11] !== ir_ex_expected_prev[11] )
		&& ((ir_ex_expected_prev[11] !== last_ir_ex_exp[11]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ir_ex[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ir_ex_expected_prev);
		$display ("     Real value = %b", ir_ex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ir_ex_exp[11] = ir_ex_expected_prev[11];
	end
	if (
		( ir_ex_expected_prev[12] !== 1'bx ) && ( ir_ex_prev[12] !== ir_ex_expected_prev[12] )
		&& ((ir_ex_expected_prev[12] !== last_ir_ex_exp[12]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ir_ex[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ir_ex_expected_prev);
		$display ("     Real value = %b", ir_ex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ir_ex_exp[12] = ir_ex_expected_prev[12];
	end
	if (
		( ir_ex_expected_prev[13] !== 1'bx ) && ( ir_ex_prev[13] !== ir_ex_expected_prev[13] )
		&& ((ir_ex_expected_prev[13] !== last_ir_ex_exp[13]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ir_ex[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ir_ex_expected_prev);
		$display ("     Real value = %b", ir_ex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ir_ex_exp[13] = ir_ex_expected_prev[13];
	end
	if (
		( ir_ex_expected_prev[14] !== 1'bx ) && ( ir_ex_prev[14] !== ir_ex_expected_prev[14] )
		&& ((ir_ex_expected_prev[14] !== last_ir_ex_exp[14]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ir_ex[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ir_ex_expected_prev);
		$display ("     Real value = %b", ir_ex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ir_ex_exp[14] = ir_ex_expected_prev[14];
	end
	if (
		( ir_ex_expected_prev[15] !== 1'bx ) && ( ir_ex_prev[15] !== ir_ex_expected_prev[15] )
		&& ((ir_ex_expected_prev[15] !== last_ir_ex_exp[15]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ir_ex[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ir_ex_expected_prev);
		$display ("     Real value = %b", ir_ex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ir_ex_exp[15] = ir_ex_expected_prev[15];
	end
	if (
		( opcode_ex_expected_prev[0] !== 1'bx ) && ( opcode_ex_prev[0] !== opcode_ex_expected_prev[0] )
		&& ((opcode_ex_expected_prev[0] !== last_opcode_ex_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode_ex[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_ex_expected_prev);
		$display ("     Real value = %b", opcode_ex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_opcode_ex_exp[0] = opcode_ex_expected_prev[0];
	end
	if (
		( opcode_ex_expected_prev[1] !== 1'bx ) && ( opcode_ex_prev[1] !== opcode_ex_expected_prev[1] )
		&& ((opcode_ex_expected_prev[1] !== last_opcode_ex_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode_ex[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_ex_expected_prev);
		$display ("     Real value = %b", opcode_ex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_opcode_ex_exp[1] = opcode_ex_expected_prev[1];
	end
	if (
		( opcode_ex_expected_prev[2] !== 1'bx ) && ( opcode_ex_prev[2] !== opcode_ex_expected_prev[2] )
		&& ((opcode_ex_expected_prev[2] !== last_opcode_ex_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode_ex[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_ex_expected_prev);
		$display ("     Real value = %b", opcode_ex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_opcode_ex_exp[2] = opcode_ex_expected_prev[2];
	end
	if (
		( opcode_ex_expected_prev[3] !== 1'bx ) && ( opcode_ex_prev[3] !== opcode_ex_expected_prev[3] )
		&& ((opcode_ex_expected_prev[3] !== last_opcode_ex_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port opcode_ex[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", opcode_ex_expected_prev);
		$display ("     Real value = %b", opcode_ex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_opcode_ex_exp[3] = opcode_ex_expected_prev[3];
	end
	if (
		( out_display_ex_expected_prev[0] !== 1'bx ) && ( out_display_ex_prev[0] !== out_display_ex_expected_prev[0] )
		&& ((out_display_ex_expected_prev[0] !== last_out_display_ex_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_display_ex[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_display_ex_expected_prev);
		$display ("     Real value = %b", out_display_ex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_out_display_ex_exp[0] = out_display_ex_expected_prev[0];
	end
	if (
		( out_display_ex_expected_prev[1] !== 1'bx ) && ( out_display_ex_prev[1] !== out_display_ex_expected_prev[1] )
		&& ((out_display_ex_expected_prev[1] !== last_out_display_ex_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_display_ex[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_display_ex_expected_prev);
		$display ("     Real value = %b", out_display_ex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_out_display_ex_exp[1] = out_display_ex_expected_prev[1];
	end
	if (
		( out_display_ex_expected_prev[2] !== 1'bx ) && ( out_display_ex_prev[2] !== out_display_ex_expected_prev[2] )
		&& ((out_display_ex_expected_prev[2] !== last_out_display_ex_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_display_ex[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_display_ex_expected_prev);
		$display ("     Real value = %b", out_display_ex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_out_display_ex_exp[2] = out_display_ex_expected_prev[2];
	end
	if (
		( out_display_ex_expected_prev[3] !== 1'bx ) && ( out_display_ex_prev[3] !== out_display_ex_expected_prev[3] )
		&& ((out_display_ex_expected_prev[3] !== last_out_display_ex_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_display_ex[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_display_ex_expected_prev);
		$display ("     Real value = %b", out_display_ex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_out_display_ex_exp[3] = out_display_ex_expected_prev[3];
	end
	if (
		( out_display_ex_expected_prev[4] !== 1'bx ) && ( out_display_ex_prev[4] !== out_display_ex_expected_prev[4] )
		&& ((out_display_ex_expected_prev[4] !== last_out_display_ex_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_display_ex[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_display_ex_expected_prev);
		$display ("     Real value = %b", out_display_ex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_out_display_ex_exp[4] = out_display_ex_expected_prev[4];
	end
	if (
		( out_display_ex_expected_prev[5] !== 1'bx ) && ( out_display_ex_prev[5] !== out_display_ex_expected_prev[5] )
		&& ((out_display_ex_expected_prev[5] !== last_out_display_ex_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_display_ex[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_display_ex_expected_prev);
		$display ("     Real value = %b", out_display_ex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_out_display_ex_exp[5] = out_display_ex_expected_prev[5];
	end
	if (
		( out_display_ex_expected_prev[6] !== 1'bx ) && ( out_display_ex_prev[6] !== out_display_ex_expected_prev[6] )
		&& ((out_display_ex_expected_prev[6] !== last_out_display_ex_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_display_ex[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_display_ex_expected_prev);
		$display ("     Real value = %b", out_display_ex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_out_display_ex_exp[6] = out_display_ex_expected_prev[6];
	end
	if (
		( out_display_ex_expected_prev[7] !== 1'bx ) && ( out_display_ex_prev[7] !== out_display_ex_expected_prev[7] )
		&& ((out_display_ex_expected_prev[7] !== last_out_display_ex_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_display_ex[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_display_ex_expected_prev);
		$display ("     Real value = %b", out_display_ex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_out_display_ex_exp[7] = out_display_ex_expected_prev[7];
	end
	if (
		( out_display_ex_expected_prev[8] !== 1'bx ) && ( out_display_ex_prev[8] !== out_display_ex_expected_prev[8] )
		&& ((out_display_ex_expected_prev[8] !== last_out_display_ex_exp[8]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_display_ex[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_display_ex_expected_prev);
		$display ("     Real value = %b", out_display_ex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_out_display_ex_exp[8] = out_display_ex_expected_prev[8];
	end
	if (
		( out_display_ex_expected_prev[9] !== 1'bx ) && ( out_display_ex_prev[9] !== out_display_ex_expected_prev[9] )
		&& ((out_display_ex_expected_prev[9] !== last_out_display_ex_exp[9]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_display_ex[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_display_ex_expected_prev);
		$display ("     Real value = %b", out_display_ex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_out_display_ex_exp[9] = out_display_ex_expected_prev[9];
	end
	if (
		( out_display_ex_expected_prev[10] !== 1'bx ) && ( out_display_ex_prev[10] !== out_display_ex_expected_prev[10] )
		&& ((out_display_ex_expected_prev[10] !== last_out_display_ex_exp[10]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_display_ex[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_display_ex_expected_prev);
		$display ("     Real value = %b", out_display_ex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_out_display_ex_exp[10] = out_display_ex_expected_prev[10];
	end
	if (
		( out_display_ex_expected_prev[11] !== 1'bx ) && ( out_display_ex_prev[11] !== out_display_ex_expected_prev[11] )
		&& ((out_display_ex_expected_prev[11] !== last_out_display_ex_exp[11]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_display_ex[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_display_ex_expected_prev);
		$display ("     Real value = %b", out_display_ex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_out_display_ex_exp[11] = out_display_ex_expected_prev[11];
	end
	if (
		( out_display_ex_expected_prev[12] !== 1'bx ) && ( out_display_ex_prev[12] !== out_display_ex_expected_prev[12] )
		&& ((out_display_ex_expected_prev[12] !== last_out_display_ex_exp[12]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_display_ex[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_display_ex_expected_prev);
		$display ("     Real value = %b", out_display_ex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_out_display_ex_exp[12] = out_display_ex_expected_prev[12];
	end
	if (
		( out_display_ex_expected_prev[13] !== 1'bx ) && ( out_display_ex_prev[13] !== out_display_ex_expected_prev[13] )
		&& ((out_display_ex_expected_prev[13] !== last_out_display_ex_exp[13]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_display_ex[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_display_ex_expected_prev);
		$display ("     Real value = %b", out_display_ex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_out_display_ex_exp[13] = out_display_ex_expected_prev[13];
	end
	if (
		( out_display_ex_expected_prev[14] !== 1'bx ) && ( out_display_ex_prev[14] !== out_display_ex_expected_prev[14] )
		&& ((out_display_ex_expected_prev[14] !== last_out_display_ex_exp[14]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_display_ex[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_display_ex_expected_prev);
		$display ("     Real value = %b", out_display_ex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_out_display_ex_exp[14] = out_display_ex_expected_prev[14];
	end
	if (
		( out_display_ex_expected_prev[15] !== 1'bx ) && ( out_display_ex_prev[15] !== out_display_ex_expected_prev[15] )
		&& ((out_display_ex_expected_prev[15] !== last_out_display_ex_exp[15]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_display_ex[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_display_ex_expected_prev);
		$display ("     Real value = %b", out_display_ex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_out_display_ex_exp[15] = out_display_ex_expected_prev[15];
	end
	if (
		( pc_out_ex_expected_prev[0] !== 1'bx ) && ( pc_out_ex_prev[0] !== pc_out_ex_expected_prev[0] )
		&& ((pc_out_ex_expected_prev[0] !== last_pc_out_ex_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_out_ex[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_out_ex_expected_prev);
		$display ("     Real value = %b", pc_out_ex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_pc_out_ex_exp[0] = pc_out_ex_expected_prev[0];
	end
	if (
		( pc_out_ex_expected_prev[1] !== 1'bx ) && ( pc_out_ex_prev[1] !== pc_out_ex_expected_prev[1] )
		&& ((pc_out_ex_expected_prev[1] !== last_pc_out_ex_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_out_ex[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_out_ex_expected_prev);
		$display ("     Real value = %b", pc_out_ex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_pc_out_ex_exp[1] = pc_out_ex_expected_prev[1];
	end
	if (
		( pc_out_ex_expected_prev[2] !== 1'bx ) && ( pc_out_ex_prev[2] !== pc_out_ex_expected_prev[2] )
		&& ((pc_out_ex_expected_prev[2] !== last_pc_out_ex_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_out_ex[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_out_ex_expected_prev);
		$display ("     Real value = %b", pc_out_ex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_pc_out_ex_exp[2] = pc_out_ex_expected_prev[2];
	end
	if (
		( pc_out_ex_expected_prev[3] !== 1'bx ) && ( pc_out_ex_prev[3] !== pc_out_ex_expected_prev[3] )
		&& ((pc_out_ex_expected_prev[3] !== last_pc_out_ex_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_out_ex[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_out_ex_expected_prev);
		$display ("     Real value = %b", pc_out_ex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_pc_out_ex_exp[3] = pc_out_ex_expected_prev[3];
	end
	if (
		( pc_out_ex_expected_prev[4] !== 1'bx ) && ( pc_out_ex_prev[4] !== pc_out_ex_expected_prev[4] )
		&& ((pc_out_ex_expected_prev[4] !== last_pc_out_ex_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_out_ex[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_out_ex_expected_prev);
		$display ("     Real value = %b", pc_out_ex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_pc_out_ex_exp[4] = pc_out_ex_expected_prev[4];
	end
	if (
		( pc_out_ex_expected_prev[5] !== 1'bx ) && ( pc_out_ex_prev[5] !== pc_out_ex_expected_prev[5] )
		&& ((pc_out_ex_expected_prev[5] !== last_pc_out_ex_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_out_ex[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_out_ex_expected_prev);
		$display ("     Real value = %b", pc_out_ex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_pc_out_ex_exp[5] = pc_out_ex_expected_prev[5];
	end
	if (
		( pc_out_ex_expected_prev[6] !== 1'bx ) && ( pc_out_ex_prev[6] !== pc_out_ex_expected_prev[6] )
		&& ((pc_out_ex_expected_prev[6] !== last_pc_out_ex_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_out_ex[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_out_ex_expected_prev);
		$display ("     Real value = %b", pc_out_ex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_pc_out_ex_exp[6] = pc_out_ex_expected_prev[6];
	end
	if (
		( pc_out_ex_expected_prev[7] !== 1'bx ) && ( pc_out_ex_prev[7] !== pc_out_ex_expected_prev[7] )
		&& ((pc_out_ex_expected_prev[7] !== last_pc_out_ex_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pc_out_ex[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pc_out_ex_expected_prev);
		$display ("     Real value = %b", pc_out_ex_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_pc_out_ex_exp[7] = pc_out_ex_expected_prev[7];
	end
	if (
		( ram_out_exibir_expected_prev[0] !== 1'bx ) && ( ram_out_exibir_prev[0] !== ram_out_exibir_expected_prev[0] )
		&& ((ram_out_exibir_expected_prev[0] !== last_ram_out_exibir_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ram_out_exibir[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ram_out_exibir_expected_prev);
		$display ("     Real value = %b", ram_out_exibir_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_ram_out_exibir_exp[0] = ram_out_exibir_expected_prev[0];
	end
	if (
		( ram_out_exibir_expected_prev[1] !== 1'bx ) && ( ram_out_exibir_prev[1] !== ram_out_exibir_expected_prev[1] )
		&& ((ram_out_exibir_expected_prev[1] !== last_ram_out_exibir_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ram_out_exibir[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ram_out_exibir_expected_prev);
		$display ("     Real value = %b", ram_out_exibir_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_ram_out_exibir_exp[1] = ram_out_exibir_expected_prev[1];
	end
	if (
		( ram_out_exibir_expected_prev[2] !== 1'bx ) && ( ram_out_exibir_prev[2] !== ram_out_exibir_expected_prev[2] )
		&& ((ram_out_exibir_expected_prev[2] !== last_ram_out_exibir_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ram_out_exibir[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ram_out_exibir_expected_prev);
		$display ("     Real value = %b", ram_out_exibir_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_ram_out_exibir_exp[2] = ram_out_exibir_expected_prev[2];
	end
	if (
		( ram_out_exibir_expected_prev[3] !== 1'bx ) && ( ram_out_exibir_prev[3] !== ram_out_exibir_expected_prev[3] )
		&& ((ram_out_exibir_expected_prev[3] !== last_ram_out_exibir_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ram_out_exibir[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ram_out_exibir_expected_prev);
		$display ("     Real value = %b", ram_out_exibir_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_ram_out_exibir_exp[3] = ram_out_exibir_expected_prev[3];
	end
	if (
		( ram_out_exibir_expected_prev[4] !== 1'bx ) && ( ram_out_exibir_prev[4] !== ram_out_exibir_expected_prev[4] )
		&& ((ram_out_exibir_expected_prev[4] !== last_ram_out_exibir_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ram_out_exibir[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ram_out_exibir_expected_prev);
		$display ("     Real value = %b", ram_out_exibir_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_ram_out_exibir_exp[4] = ram_out_exibir_expected_prev[4];
	end
	if (
		( ram_out_exibir_expected_prev[5] !== 1'bx ) && ( ram_out_exibir_prev[5] !== ram_out_exibir_expected_prev[5] )
		&& ((ram_out_exibir_expected_prev[5] !== last_ram_out_exibir_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ram_out_exibir[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ram_out_exibir_expected_prev);
		$display ("     Real value = %b", ram_out_exibir_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_ram_out_exibir_exp[5] = ram_out_exibir_expected_prev[5];
	end
	if (
		( ram_out_exibir_expected_prev[6] !== 1'bx ) && ( ram_out_exibir_prev[6] !== ram_out_exibir_expected_prev[6] )
		&& ((ram_out_exibir_expected_prev[6] !== last_ram_out_exibir_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ram_out_exibir[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ram_out_exibir_expected_prev);
		$display ("     Real value = %b", ram_out_exibir_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_ram_out_exibir_exp[6] = ram_out_exibir_expected_prev[6];
	end
	if (
		( ram_out_exibir_expected_prev[7] !== 1'bx ) && ( ram_out_exibir_prev[7] !== ram_out_exibir_expected_prev[7] )
		&& ((ram_out_exibir_expected_prev[7] !== last_ram_out_exibir_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ram_out_exibir[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ram_out_exibir_expected_prev);
		$display ("     Real value = %b", ram_out_exibir_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_ram_out_exibir_exp[7] = ram_out_exibir_expected_prev[7];
	end
	if (
		( ram_out_exibir_expected_prev[8] !== 1'bx ) && ( ram_out_exibir_prev[8] !== ram_out_exibir_expected_prev[8] )
		&& ((ram_out_exibir_expected_prev[8] !== last_ram_out_exibir_exp[8]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ram_out_exibir[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ram_out_exibir_expected_prev);
		$display ("     Real value = %b", ram_out_exibir_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_ram_out_exibir_exp[8] = ram_out_exibir_expected_prev[8];
	end
	if (
		( ram_out_exibir_expected_prev[9] !== 1'bx ) && ( ram_out_exibir_prev[9] !== ram_out_exibir_expected_prev[9] )
		&& ((ram_out_exibir_expected_prev[9] !== last_ram_out_exibir_exp[9]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ram_out_exibir[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ram_out_exibir_expected_prev);
		$display ("     Real value = %b", ram_out_exibir_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_ram_out_exibir_exp[9] = ram_out_exibir_expected_prev[9];
	end
	if (
		( ram_out_exibir_expected_prev[10] !== 1'bx ) && ( ram_out_exibir_prev[10] !== ram_out_exibir_expected_prev[10] )
		&& ((ram_out_exibir_expected_prev[10] !== last_ram_out_exibir_exp[10]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ram_out_exibir[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ram_out_exibir_expected_prev);
		$display ("     Real value = %b", ram_out_exibir_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_ram_out_exibir_exp[10] = ram_out_exibir_expected_prev[10];
	end
	if (
		( ram_out_exibir_expected_prev[11] !== 1'bx ) && ( ram_out_exibir_prev[11] !== ram_out_exibir_expected_prev[11] )
		&& ((ram_out_exibir_expected_prev[11] !== last_ram_out_exibir_exp[11]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ram_out_exibir[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ram_out_exibir_expected_prev);
		$display ("     Real value = %b", ram_out_exibir_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_ram_out_exibir_exp[11] = ram_out_exibir_expected_prev[11];
	end
	if (
		( ram_out_exibir_expected_prev[12] !== 1'bx ) && ( ram_out_exibir_prev[12] !== ram_out_exibir_expected_prev[12] )
		&& ((ram_out_exibir_expected_prev[12] !== last_ram_out_exibir_exp[12]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ram_out_exibir[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ram_out_exibir_expected_prev);
		$display ("     Real value = %b", ram_out_exibir_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_ram_out_exibir_exp[12] = ram_out_exibir_expected_prev[12];
	end
	if (
		( ram_out_exibir_expected_prev[13] !== 1'bx ) && ( ram_out_exibir_prev[13] !== ram_out_exibir_expected_prev[13] )
		&& ((ram_out_exibir_expected_prev[13] !== last_ram_out_exibir_exp[13]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ram_out_exibir[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ram_out_exibir_expected_prev);
		$display ("     Real value = %b", ram_out_exibir_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_ram_out_exibir_exp[13] = ram_out_exibir_expected_prev[13];
	end
	if (
		( ram_out_exibir_expected_prev[14] !== 1'bx ) && ( ram_out_exibir_prev[14] !== ram_out_exibir_expected_prev[14] )
		&& ((ram_out_exibir_expected_prev[14] !== last_ram_out_exibir_exp[14]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ram_out_exibir[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ram_out_exibir_expected_prev);
		$display ("     Real value = %b", ram_out_exibir_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_ram_out_exibir_exp[14] = ram_out_exibir_expected_prev[14];
	end
	if (
		( ram_out_exibir_expected_prev[15] !== 1'bx ) && ( ram_out_exibir_prev[15] !== ram_out_exibir_expected_prev[15] )
		&& ((ram_out_exibir_expected_prev[15] !== last_ram_out_exibir_exp[15]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ram_out_exibir[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ram_out_exibir_expected_prev);
		$display ("     Real value = %b", ram_out_exibir_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_ram_out_exibir_exp[15] = ram_out_exibir_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module lab06_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk_27;
reg [7:0] sw;
reg sw17;
// wires                                               
wire [6:0] hex0;
wire [6:0] hex1;
wire [6:0] hex2;
wire [6:0] hex3;
wire [15:0] ir_ex;
wire [3:0] opcode_ex;
wire [15:0] out_display_ex;
wire [7:0] pc_out_ex;
wire [15:0] ram_out_exibir;

wire sampler;                             

// assign statements (if any)                          
lab06 i1 (
// port map - connection between master ports and signals/registers   
	.clk_27(clk_27),
	.hex0(hex0),
	.hex1(hex1),
	.hex2(hex2),
	.hex3(hex3),
	.ir_ex(ir_ex),
	.opcode_ex(opcode_ex),
	.out_display_ex(out_display_ex),
	.pc_out_ex(pc_out_ex),
	.ram_out_exibir(ram_out_exibir),
	.sw(sw),
	.sw17(sw17)
);

// clk_27
always
begin
	clk_27 = 1'b0;
	clk_27 = #250 1'b1;
	#250;
end 
// sw[ 7 ]
initial
begin
	sw[7] = 1'b0;
end 
// sw[ 6 ]
initial
begin
	sw[6] = 1'b0;
end 
// sw[ 5 ]
initial
begin
	sw[5] = 1'b0;
end 
// sw[ 4 ]
initial
begin
	sw[4] = 1'b0;
end 
// sw[ 3 ]
initial
begin
	sw[3] = 1'b0;
end 
// sw[ 2 ]
initial
begin
	sw[2] = 1'b0;
	sw[2] = #620000 1'b1;
	sw[2] = #370000 1'b0;
end 
// sw[ 1 ]
initial
begin
	sw[1] = 1'b1;
	sw[1] = #620000 1'b0;
	sw[1] = #370000 1'b1;
end 
// sw[ 0 ]
initial
begin
	sw[0] = 1'b0;
end 

// sw17
initial
begin
	sw17 = 1'b0;
	sw17 = #500000 1'b1;
	sw17 = #200000 1'b0;
end 

lab06_vlg_sample_tst tb_sample (
	.clk_27(clk_27),
	.sw(sw),
	.sw17(sw17),
	.sampler_tx(sampler)
);

lab06_vlg_check_tst tb_out(
	.hex0(hex0),
	.hex1(hex1),
	.hex2(hex2),
	.hex3(hex3),
	.ir_ex(ir_ex),
	.opcode_ex(opcode_ex),
	.out_display_ex(out_display_ex),
	.pc_out_ex(pc_out_ex),
	.ram_out_exibir(ram_out_exibir),
	.sampler_rx(sampler)
);
endmodule

