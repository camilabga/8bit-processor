// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/22/2018 22:39:43"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    lab01
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab01_vlg_sample_tst(
	buttons,
	clk_27,
	r0,
	sw,
	sampler_tx
);
input [3:0] buttons;
input  clk_27;
input  r0;
input  sw;
output sampler_tx;

reg sample;
time current_time;
always @(buttons or clk_27 or r0 or sw)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module lab01_vlg_check_tst (
	display7,
	ledr,
	sampler_rx
);
input [6:0] display7;
input  ledr;
input sampler_rx;

reg [6:0] display7_expected;
reg  ledr_expected;

reg [6:0] display7_prev;
reg  ledr_prev;

reg [6:0] display7_expected_prev;
reg  ledr_expected_prev;

reg [6:0] last_display7_exp;
reg  last_ledr_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	display7_prev = display7;
	ledr_prev = ledr;
end

// update expected /o prevs

always @(trigger)
begin
	display7_expected_prev = display7_expected;
	ledr_expected_prev = ledr_expected;
end


// expected display7[ 6 ]
initial
begin
	display7_expected[6] = 1'bX;
end 
// expected display7[ 5 ]
initial
begin
	display7_expected[5] = 1'bX;
end 
// expected display7[ 4 ]
initial
begin
	display7_expected[4] = 1'bX;
end 
// expected display7[ 3 ]
initial
begin
	display7_expected[3] = 1'bX;
end 
// expected display7[ 2 ]
initial
begin
	display7_expected[2] = 1'bX;
end 
// expected display7[ 1 ]
initial
begin
	display7_expected[1] = 1'bX;
end 
// expected display7[ 0 ]
initial
begin
	display7_expected[0] = 1'bX;
end 

// expected ledr
initial
begin
	ledr_expected = 1'bX;
end 
// generate trigger
always @(display7_expected or display7 or ledr_expected or ledr)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected display7 = %b | expected ledr = %b | ",display7_expected_prev,ledr_expected_prev);
	$display("| real display7 = %b | real ledr = %b | ",display7_prev,ledr_prev);
`endif
	if (
		( display7_expected_prev[0] !== 1'bx ) && ( display7_prev[0] !== display7_expected_prev[0] )
		&& ((display7_expected_prev[0] !== last_display7_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display7[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display7_expected_prev);
		$display ("     Real value = %b", display7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display7_exp[0] = display7_expected_prev[0];
	end
	if (
		( display7_expected_prev[1] !== 1'bx ) && ( display7_prev[1] !== display7_expected_prev[1] )
		&& ((display7_expected_prev[1] !== last_display7_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display7[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display7_expected_prev);
		$display ("     Real value = %b", display7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display7_exp[1] = display7_expected_prev[1];
	end
	if (
		( display7_expected_prev[2] !== 1'bx ) && ( display7_prev[2] !== display7_expected_prev[2] )
		&& ((display7_expected_prev[2] !== last_display7_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display7[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display7_expected_prev);
		$display ("     Real value = %b", display7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display7_exp[2] = display7_expected_prev[2];
	end
	if (
		( display7_expected_prev[3] !== 1'bx ) && ( display7_prev[3] !== display7_expected_prev[3] )
		&& ((display7_expected_prev[3] !== last_display7_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display7[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display7_expected_prev);
		$display ("     Real value = %b", display7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display7_exp[3] = display7_expected_prev[3];
	end
	if (
		( display7_expected_prev[4] !== 1'bx ) && ( display7_prev[4] !== display7_expected_prev[4] )
		&& ((display7_expected_prev[4] !== last_display7_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display7[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display7_expected_prev);
		$display ("     Real value = %b", display7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display7_exp[4] = display7_expected_prev[4];
	end
	if (
		( display7_expected_prev[5] !== 1'bx ) && ( display7_prev[5] !== display7_expected_prev[5] )
		&& ((display7_expected_prev[5] !== last_display7_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display7[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display7_expected_prev);
		$display ("     Real value = %b", display7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display7_exp[5] = display7_expected_prev[5];
	end
	if (
		( display7_expected_prev[6] !== 1'bx ) && ( display7_prev[6] !== display7_expected_prev[6] )
		&& ((display7_expected_prev[6] !== last_display7_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port display7[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", display7_expected_prev);
		$display ("     Real value = %b", display7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_display7_exp[6] = display7_expected_prev[6];
	end
	if (
		( ledr_expected_prev !== 1'bx ) && ( ledr_prev !== ledr_expected_prev )
		&& ((ledr_expected_prev !== last_ledr_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledr :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledr_expected_prev);
		$display ("     Real value = %b", ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ledr_exp = ledr_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module lab01_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] buttons;
reg clk_27;
reg r0;
reg sw;
// wires                                               
wire [6:0] display7;
wire ledr;

wire sampler;                             

// assign statements (if any)                          
lab01 i1 (
// port map - connection between master ports and signals/registers   
	.buttons(buttons),
	.clk_27(clk_27),
	.display7(display7),
	.ledr(ledr),
	.r0(r0),
	.sw(sw)
);
// buttons[ 3 ]
initial
begin
	buttons[3] = 1'b0;
	buttons[3] = #10000 1'b1;
	buttons[3] = #50000 1'b0;
end 
// buttons[ 2 ]
initial
begin
	buttons[2] = 1'b0;
	buttons[2] = #230000 1'b1;
	buttons[2] = #20000 1'b0;
	buttons[2] = #20000 1'b1;
	buttons[2] = #50000 1'b0;
end 
// buttons[ 1 ]
initial
begin
	buttons[1] = 1'b0;
	buttons[1] = #100000 1'b1;
	buttons[1] = #40000 1'b0;
	buttons[1] = #210000 1'b1;
	buttons[1] = #40000 1'b0;
end 
// buttons[ 0 ]
initial
begin
	buttons[0] = 1'b0;
	buttons[0] = #170000 1'b1;
	buttons[0] = #40000 1'b0;
end 

// clk_27
always
begin
	clk_27 = 1'b0;
	clk_27 = #500 1'b1;
	#500;
end 

// r0
initial
begin
	r0 = 1'b0;
end 

// sw
initial
begin
	sw = 1'b0;
end 

lab01_vlg_sample_tst tb_sample (
	.buttons(buttons),
	.clk_27(clk_27),
	.r0(r0),
	.sw(sw),
	.sampler_tx(sampler)
);

lab01_vlg_check_tst tb_out(
	.display7(display7),
	.ledr(ledr),
	.sampler_rx(sampler)
);
endmodule

